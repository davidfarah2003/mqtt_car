{"ast":null,"code":"import { ref } from \"vue\";\nconst getMqttClient = () => {\n  //maybe need to use ref? i dont think\n\n  const mqtt = require('precompiled-mqtt');\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000,\n    // Auth\n    clientId: 'emqx_test',\n    username: 'emqx_test',\n    password: 'emqx_test'\n  };\n\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n  const client = mqtt.connect(brokerUrl);\n  client.on('connect', function () {\n    console.log('Connected');\n    client.subscribe('test', function (err) {\n      if (!err) {\n        client.publish('test', 'Hello mqtt');\n      }\n    });\n  });\n  client.on('message', function (topic, message) {\n    // message is Buffer\n    console.log(message.toString());\n    client.end();\n  });\n  return {};\n};\ngetMqttClient();\n\n//export default getMqttClient","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","options","clean","connectTimeout","clientId","username","password","client","connect","brokerUrl","on","console","log","subscribe","err","publish","topic","message","toString","end"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\n\nconst getMqttClient = () => {\n    //maybe need to use ref? i dont think\n\n    const mqtt = require('precompiled-mqtt')\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        clientId: 'emqx_test',\n        username: 'emqx_test',\n        password: 'emqx_test',\n    }\n\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n        const client  = mqtt.connect(brokerUrl)\n\n        client.on('connect', function () {\n            console.log('Connected')\n            client.subscribe('test', function (err) {\n                if (!err) {\n                    client.publish('test', 'Hello mqtt')\n                }\n            })\n        })\n\n        client.on('message', function (topic, message) {\n            // message is Buffer\n            console.log(message.toString())\n            client.end()\n        })\n\n\n    return {}\n}\n\ngetMqttClient()\n\n//export default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;AAEvB,MAAMC,aAAa,GAAG,MAAM;EACxB;;EAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,kBAAkB,CAAC;EACxC,MAAMC,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE,IAAI;IACpB;IACAC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE;EACd,CAAC;;EAGD;;EAEI,MAAMC,MAAM,GAAIR,IAAI,CAACS,OAAO,CAACC,SAAS,CAAC;EAEvCF,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,YAAY;IAC7BC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxBL,MAAM,CAACM,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;MACpC,IAAI,CAACA,GAAG,EAAE;QACNP,MAAM,CAACQ,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;MACxC;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEFR,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;IAC3C;IACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;IAC/BX,MAAM,CAACY,GAAG,EAAE;EAChB,CAAC,CAAC;EAGN,OAAO,CAAC,CAAC;AACb,CAAC;AAEDrB,aAAa,EAAE;;AAEf"},"metadata":{},"sourceType":"module"}