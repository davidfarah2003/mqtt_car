{"ast":null,"code":"import getMqttClient from \"@/composables/getMqttClient\";\n//import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const mqtt = require('precompiled-mqtt');\n    const options = {\n      // Clean session\n      clean: true,\n      connectTimeout: 4000\n      // Auth\n      //clientId: 'emqx_test',\n      //username: 'emqx_test',\n      //password: 'emqx_test',\n    };\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    const MQTT = require(\"async-mqtt\");\n    const client = MQTT.connect(\"tcp://somehost.com:1883\");\n\n    // When passing async functions as event listeners, make sure to have a try catch block\n\n    const doStuff = async () => {\n      console.log(\"Starting\");\n      try {\n        await client.publish(\"wow/so/cool\", \"It works!\");\n        // This line doesn't run until the server responds to the publish\n        await client.end();\n        // This line doesn't run until the client has disconnected without error\n        console.log(\"Done\");\n      } catch (e) {\n        // Do something about it!\n        console.log(e.stack);\n        process.exit();\n      }\n    };\n    client.on(\"connect\", doStuff);\n  }\n};","map":{"version":3,"mappings":"AAUA,OAAOA,aAAY,MAAO,6BAA6B;AACvD;AACA,OAAOC,IAAG,MAAO,kBAAkB;AACnC,SAAQC,GAAG,QAAO,KAAK;AAEvB,eAAe;EACbC,KAAK,GAAE;IACL,MAAMF,IAAG,GAAIG,OAAO,CAAC,kBAAkB;IAEvC,MAAMC,OAAM,GAAI;MACd;MACAC,KAAK,EAAE,IAAI;MACXC,cAAc,EAAE;MAChB;MACA;MACA;MACA;IACF;;IAEA;;IAEA,MAAMC,IAAG,GAAIJ,OAAO,CAAC,YAAY,CAAC;IAElC,MAAMK,MAAK,GAAID,IAAI,CAACE,OAAO,CAAC,yBAAyB,CAAC;;IAE1D;;IAEI,MAAMC,OAAM,GAAI,YAAY;MAE1BC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,IAAI;QACF,MAAMJ,MAAM,CAACK,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC;QAChD;QACA,MAAML,MAAM,CAACM,GAAG,EAAE;QAClB;QACAH,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACrB,EAAE,OAAOG,CAAC,EAAC;QACT;QACAJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAACC,KAAK,CAAC;QACpBC,OAAO,CAACC,IAAI,EAAE;MAChB;IACF;IAEAV,MAAM,CAACW,EAAE,CAAC,SAAS,EAAET,OAAO,CAAC;EAE/B;AACF","names":["getMqttClient","mqtt","ref","setup","require","options","clean","connectTimeout","MQTT","client","connect","doStuff","console","log","publish","end","e","stack","process","exit","on"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/App.vue"],"sourcesContent":["<template>\n  <nav>\n    <router-link :to=\"{name: 'Home'}\">Home</router-link> |\n    <router-link :to=\"{name: 'AllData'}\">All Data</router-link> |\n    <router-link :to=\"{name: 'Recordings'}\">Recordings</router-link>\n  </nav>\n  <router-view/>\n</template>\n\n<script>\nimport getMqttClient from \"@/composables/getMqttClient\";\n//import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\nimport {ref} from \"vue\";\n\nexport default {\n  setup(){\n    const mqtt = require('precompiled-mqtt')\n\n    const options = {\n      // Clean session\n      clean: true,\n      connectTimeout: 4000,\n      // Auth\n      //clientId: 'emqx_test',\n      //username: 'emqx_test',\n      //password: 'emqx_test',\n    }\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    const MQTT = require(\"async-mqtt\");\n\n    const client = MQTT.connect(\"tcp://somehost.com:1883\");\n\n// When passing async functions as event listeners, make sure to have a try catch block\n\n    const doStuff = async () => {\n\n      console.log(\"Starting\");\n      try {\n        await client.publish(\"wow/so/cool\", \"It works!\");\n        // This line doesn't run until the server responds to the publish\n        await client.end();\n        // This line doesn't run until the client has disconnected without error\n        console.log(\"Done\");\n      } catch (e){\n        // Do something about it!\n        console.log(e.stack);\n        process.exit();\n      }\n    }\n\n    client.on(\"connect\", doStuff);\n\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}