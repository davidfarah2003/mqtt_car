{"ast":null,"code":"import _regeneratorRuntime from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * Class that is used to get data from the API\n * Written by: David Farah\n * Email: david.farah@epfl.ch\n */\nvar apiUtils = /*#__PURE__*/function () {\n  //serverAddress = \"http://34.65.125.98:3000\"\n\n  /**\n   * Method called when object is built\n   * @param apiPath can be used to set a different api endpoint\n   */\n  function apiUtils(apiPath) {\n    _classCallCheck(this, apiUtils);\n    _defineProperty(this, \"serverAddress\", \"http://localhost:3000\");\n    _defineProperty(this, \"apiPath\", \"/api/configs/\");\n    if (apiPath) this.apiPath = apiPath;\n  }\n\n  /**\n   * Get raw configuration data from API\n   * @param configName Name of the config file\n   * @returns {Promise<any>} config json data promise (async)\n   */\n  _createClass(apiUtils, [{\n    key: \"getConfig\",\n    value: function () {\n      var _getConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(configName) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(this.serverAddress + this.apiPath + configName);\n              case 2:\n                response = _context.sent;\n                _context.t0 = JSON;\n                _context.next = 6;\n                return response.text();\n              case 6:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", _context.t0.parse.call(_context.t0, _context.t1));\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getConfig(_x) {\n        return _getConfig.apply(this, arguments);\n      }\n      return getConfig;\n    }()\n  }]);\n  return apiUtils;\n}();\nexport { apiUtils as default };","map":{"version":3,"names":["apiUtils","apiPath","configName","fetch","serverAddress","response","JSON","text","parse"],"sources":["/home/davidf/Desktop/EPFL/mqtt_car/src/composables/apiUtils.mjs"],"sourcesContent":["/**\n * Class that is used to get data from the API\n * Written by: David Farah\n * Email: david.farah@epfl.ch\n */\nexport default class apiUtils {\n    serverAddress = \"http://localhost:3000\"\n    //serverAddress = \"http://34.65.125.98:3000\"\n    apiPath = \"/api/configs/\"\n\n    /**\n     * Method called when object is built\n     * @param apiPath can be used to set a different api endpoint\n     */\n    constructor(apiPath) {\n        if (apiPath) this.apiPath = apiPath\n    }\n\n    /**\n     * Get raw configuration data from API\n     * @param configName Name of the config file\n     * @returns {Promise<any>} config json data promise (async)\n     */\n    async getConfig(configName) {\n        let response = await fetch(this.serverAddress + this.apiPath + configName)\n        return JSON.parse(await response.text())\n    }\n}"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAJA,IAKqBA,QAAQ;EAEzB;;EAGA;AACJ;AACA;AACA;EACI,kBAAYC,OAAO,EAAE;IAAA;IAAA,uCARL,uBAAuB;IAAA,iCAE7B,eAAe;IAOrB,IAAIA,OAAO,EAAE,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvC;;EAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA;MAAA,4EAKA,iBAAgBC,UAAU;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACDC,KAAK,CAAC,IAAI,CAACC,aAAa,GAAG,IAAI,CAACH,OAAO,GAAGC,UAAU,CAAC;cAAA;gBAAtEG,QAAQ;gBAAA,cACLC,IAAI;gBAAA;gBAAA,OAAaD,QAAQ,CAACE,IAAI,EAAE;cAAA;gBAAA;gBAAA,6CAA3BC,KAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAAA,SArBgBR,QAAQ"},"metadata":{},"sourceType":"module"}