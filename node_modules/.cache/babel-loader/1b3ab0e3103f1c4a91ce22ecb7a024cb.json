{"ast":null,"code":"import getMqttClient from \"@/composables/getMqttClient\";\n//import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const mqtt = require('precompiled-mqtt');\n    const options = {\n      // Clean session\n      clean: true,\n      connectTimeout: 4000\n      // Auth\n      //clientId: 'emqx_test',\n      //username: 'emqx_test',\n      //password: 'emqx_test',\n    };\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    let client = ref(null);\n    const connect = async () => {\n      client = ref(await mqtt.connect('mqtt://127.0.0.1:9001'));\n      client.value.on('connect', function () {\n        console.log('Connected');\n        client.value.subscribe('test', function (err) {\n          if (!err) {\n            client.value.publish('test', 'Hello mqtt');\n          }\n        });\n      });\n      client.value.on('message', function (topic, message) {\n        // message is Buffer\n        console.log(message.toString());\n      });\n    };\n    connect();\n    console.log(client);\n  }\n};","map":{"version":3,"mappings":"AAUA,OAAOA,aAAY,MAAO,6BAA6B;AACvD;AACA,OAAOC,IAAG,MAAO,kBAAkB;AACnC,SAAQC,GAAG,QAAO,KAAK;AAEvB,eAAe;EACbC,KAAK,GAAE;IACL,MAAMF,IAAG,GAAIG,OAAO,CAAC,kBAAkB;IAEvC,MAAMC,OAAM,GAAI;MACd;MACAC,KAAK,EAAE,IAAI;MACXC,cAAc,EAAE;MAChB;MACA;MACA;MACA;IACF;;IAEA;;IAEA,IAAIC,MAAK,GAAIN,GAAG,CAAC,IAAI;IAErB,MAAMO,OAAM,GAAI,YAAY;MAC1BD,MAAK,GAAKN,GAAG,CAAE,MAAMD,IAAI,CAACQ,OAAO,CAAC,uBAAuB,CAAC;MAE1DD,MAAM,CAACE,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,YAAY;QACrCC,OAAO,CAACC,GAAG,CAAC,WAAW;QACvBL,MAAM,CAACE,KAAK,CAACI,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;UAC5C,IAAI,CAACA,GAAG,EAAE;YACRP,MAAM,CAACE,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,YAAY;UAC3C;QACF,CAAC;MACH,CAAC,CAAC;MAEFR,MAAM,CAACE,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;QACnD;QACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE;MAChC,CAAC,CAAC;IACJ;IAEAV,OAAO,EAAC;IACRG,OAAO,CAACC,GAAG,CAACL,MAAM;EAEpB;AACF","names":["getMqttClient","mqtt","ref","setup","require","options","clean","connectTimeout","client","connect","value","on","console","log","subscribe","err","publish","topic","message","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/App.vue"],"sourcesContent":["<template>\n  <nav>\n    <router-link :to=\"{name: 'Home'}\">Home</router-link> |\n    <router-link :to=\"{name: 'AllData'}\">All Data</router-link> |\n    <router-link :to=\"{name: 'Recordings'}\">Recordings</router-link>\n  </nav>\n  <router-view/>\n</template>\n\n<script>\nimport getMqttClient from \"@/composables/getMqttClient\";\n//import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\nimport {ref} from \"vue\";\n\nexport default {\n  setup(){\n    const mqtt = require('precompiled-mqtt')\n\n    const options = {\n      // Clean session\n      clean: true,\n      connectTimeout: 4000,\n      // Auth\n      //clientId: 'emqx_test',\n      //username: 'emqx_test',\n      //password: 'emqx_test',\n    }\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    let client = ref(null)\n\n    const connect = async () => {\n      client  = ref( await mqtt.connect('mqtt://127.0.0.1:9001'))\n\n      client.value.on('connect', function () {\n        console.log('Connected')\n        client.value.subscribe('test', function (err) {\n          if (!err) {\n            client.value.publish('test', 'Hello mqtt')\n          }\n        })\n      });\n\n      client.value.on('message', function (topic, message) {\n        // message is Buffer\n        console.log(message.toString())\n      });\n    }\n\n    connect()\n    console.log(client)\n\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}