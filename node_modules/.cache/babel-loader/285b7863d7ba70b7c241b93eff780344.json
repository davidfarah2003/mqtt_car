{"ast":null,"code":"import { inject, onActivated, onDeactivated, onMounted, onUnmounted, ref } from \"vue\";\nimport { cleanClient, setupClient } from \"@/composables/mqttMethods\";\nexport default {\n  name: \"AllData\",\n  setup: function () {\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient(clientPromise, subscribedTopics, mqttCallBack);\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    onActivated(() => {\n      currMounted = true;\n    });\n    onDeactivated(() => {\n      currMounted = false;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    const mqttCallBack = mqttClient => {\n      mounted = true;\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n    };\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let mounted = false; //indicate if the Home component is mounted\n    let currMounted = false; //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (currMounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n        }\n      });\n    }\n    return {\n      test,\n      connected\n    };\n  }\n};","map":{"version":3,"mappings":"AAOA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AACnF,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,IAAI,EAAE,SAAS;EAEfC,KAAK,EAAE,YAAY;IACjB,MAAMC,aAAY,GAAIV,MAAM,CAAC,YAAY,GAAG;IAC5C,MAAMW,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;IACtD,IAAIC,SAAQ,GAAIP,GAAG,CAAC,KAAK,CAAC,EAAE;;IAE5B;;;IAGAF,SAAS,CAAC,MAAM;MACdI,WAAW,CAACG,aAAa,EAAEC,gBAAgB,EAAEE,YAAY;IAC3D,CAAC,CAAC;;IAEF;;;IAGAT,WAAW,CAAC,MAAK;MACfE,WAAW,CAACI,aAAa,EAAEC,gBAAgB;IAC7C,CAAC,CAAC;IAEFV,WAAW,CAAC,MAAK;MACfa,WAAU,GAAI,IAAG;IACnB,CAAC;IAEDZ,aAAa,CAAC,MAAK;MACjBY,WAAU,GAAI,KAAI;MAClBR,WAAW,CAACI,aAAa,EAAEC,gBAAgB;IAC7C,CAAC;IAED,MAAME,YAAW,GAAKE,UAAU,IAAK;MACnCC,OAAM,GAAI,IAAG;MACb;MACAC,eAAe,CAACF,UAAU;IAC5B;;IAGA;IACA,IAAIG,IAAG,GAAIb,GAAG,CAACc,GAAG,CAAC;IACnB,IAAIH,OAAM,GAAI,KAAK,EAAG;IACtB,IAAIF,WAAU,GAAI,KAAK,EAAG;;IAE1B;;;IAGA,SAASG,eAAe,CAACF,UAAU,EAAC;MAClC;MACA,IAAGA,UAAU,CAACH,SAAS,EAAEA,SAAS,CAACQ,KAAI,GAAI,IAAG;MAC9CL,UAAU,CAACM,EAAE,CAAC,SAAS,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,IAAI;MACrDL,UAAU,CAACM,EAAE,CAAC,YAAY,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,KAAK;MACzDL,UAAU,CAACM,EAAE,CAAC,WAAW,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,KAAK;MAExDL,UAAU,CAACM,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGT,WAAW,EAAC;UACbU,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIH,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACG,QAAQ,EAAE;UACpER,IAAI,CAACE,KAAI,GAAIG,OAAM;QACrB;MACF,CAAC;IACH;IAEA,OAAO;MAACL,IAAI;MAAEN;IAAS,CAAC;EAE1B;AACF","names":["inject","onActivated","onDeactivated","onMounted","onUnmounted","ref","cleanClient","setupClient","name","setup","clientPromise","subscribedTopics","connected","mqttCallBack","currMounted","mqttClient","mounted","updateVariables","test","NaN","value","on","topic","message","console","log","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/AllData.vue"],"sourcesContent":["<template>\n  All data\n  <h1 v-if=\"connected\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n</template>\n\n<script>\nimport {inject, onActivated, onDeactivated, onMounted, onUnmounted, ref} from \"vue\";\nimport {cleanClient, setupClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"AllData\",\n\n  setup: function () {\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient(clientPromise, subscribedTopics, mqttCallBack)\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    onActivated(()=> {\n      currMounted = true\n    })\n\n    onDeactivated(()=> {\n      currMounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    const mqttCallBack = (mqttClient) => {\n      mounted = true\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n    }\n\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let mounted = false;  //indicate if the Home component is mounted\n    let currMounted = false;  //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n      //Update connected status correctly\n      if(mqttClient.connected) connected.value = true\n      mqttClient.on('connect', () => connected.value = true)\n      mqttClient.on('disconnect', () => connected.value = false)\n      mqttClient.on('reconnect', () => connected.value = false)\n\n      mqttClient.on('message', (topic, message)=>{\n        if(currMounted){\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n          test.value = message\n        }\n      })\n    }\n\n    return {test, connected};\n\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}