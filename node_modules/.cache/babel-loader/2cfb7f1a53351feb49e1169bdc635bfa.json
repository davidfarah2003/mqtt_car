{"ast":null,"code":"/**\n * Set up the MQTT client for this component\n */\nexport function setupClient(mqttClientPromise, topicsArray, callback) {\n  mqttClientPromise.then(client => {\n    //Subscribe to needed topics\n    subscribeTopics(client, topicsArray);\n    callback(client);\n  }).catch(err => {\n    console.log(err);\n  });\n}\n\n/**\n * Cleanup the mqtt client when unmounting\n */\nexport function cleanClient(mqttClientPromise, topicsArray) {\n  mqttClientPromise.then(client => {\n    unsubscribeTopics(client, topicsArray);\n  }).catch(err => {\n    console.log(err);\n  });\n}\n\n/**\n * Subscribe to the topics indicated in the subscribedTopics array\n */\nfunction subscribeTopics(mqttClient, subscribedTopics) {\n  if (mqttClient) {\n    subscribedTopics.forEach(topic => {\n      mqttClient.subscribe(topic);\n      console.log(\"subscribed to \" + topic);\n    });\n  }\n}\n\n/**\n * Unsubscribe from the topics indicated in the subscribedTopics array\n */\nfunction unsubscribeTopics(mqttClient, subscribedTopics) {\n  if (mqttClient) {\n    subscribedTopics.forEach(topic => {\n      mqttClient.unsubscribe(topic);\n      console.log(\"unsubscribed from \" + topic);\n    });\n  }\n}\nexport default [setupClient, cleanClient];","map":{"version":3,"names":["setupClient","mqttClientPromise","topicsArray","callback","then","client","subscribeTopics","catch","err","console","log","cleanClient","unsubscribeTopics","mqttClient","subscribedTopics","forEach","topic","subscribe","unsubscribe"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/mqttMethods.js"],"sourcesContent":["/**\n * Set up the MQTT client for this component\n */\nexport function setupClient(mqttClientPromise, topicsArray, callback) {\n    mqttClientPromise\n        .then((client) => {\n            //Subscribe to needed topics\n            subscribeTopics(client, topicsArray)\n            callback(client);\n        })\n        .catch((err) => {\n            console.log(err)\n        });\n}\n\n/**\n * Cleanup the mqtt client when unmounting\n */\nexport function cleanClient(mqttClientPromise, topicsArray) {\n    mqttClientPromise\n        .then((client) => {\n            unsubscribeTopics(client, topicsArray)\n        })\n        .catch((err) => {\n            console.log(err)\n        });\n}\n\n/**\n * Subscribe to the topics indicated in the subscribedTopics array\n */\nfunction subscribeTopics(mqttClient, subscribedTopics){\n    if (mqttClient) {\n        subscribedTopics.forEach( (topic)=> {\n            mqttClient.subscribe(topic)\n            console.log(\"subscribed to \" + topic)\n        })\n    }\n}\n\n/**\n * Unsubscribe from the topics indicated in the subscribedTopics array\n */\nfunction unsubscribeTopics(mqttClient, subscribedTopics){\n    if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n            mqttClient.unsubscribe(topic)\n            console.log(\"unsubscribed from \" + topic)\n        })\n    }\n}\n\nexport default [setupClient, cleanClient]"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,WAAW,CAACC,iBAAiB,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAClEF,iBAAiB,CACZG,IAAI,CAAEC,MAAM,IAAK;IACd;IACAC,eAAe,CAACD,MAAM,EAAEH,WAAW,CAAC;IACpCC,QAAQ,CAACE,MAAM,CAAC;EACpB,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,CAAC,CAAC;AACV;;AAEA;AACA;AACA;AACA,OAAO,SAASG,WAAW,CAACV,iBAAiB,EAAEC,WAAW,EAAE;EACxDD,iBAAiB,CACZG,IAAI,CAAEC,MAAM,IAAK;IACdO,iBAAiB,CAACP,MAAM,EAAEH,WAAW,CAAC;EAC1C,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAK;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,CAAC,CAAC;AACV;;AAEA;AACA;AACA;AACA,SAASF,eAAe,CAACO,UAAU,EAAEC,gBAAgB,EAAC;EAClD,IAAID,UAAU,EAAE;IACZC,gBAAgB,CAACC,OAAO,CAAGC,KAAK,IAAI;MAChCH,UAAU,CAACI,SAAS,CAACD,KAAK,CAAC;MAC3BP,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGM,KAAK,CAAC;IACzC,CAAC,CAAC;EACN;AACJ;;AAEA;AACA;AACA;AACA,SAASJ,iBAAiB,CAACC,UAAU,EAAEC,gBAAgB,EAAC;EACpD,IAAGD,UAAU,EAAC;IACVC,gBAAgB,CAACC,OAAO,CAAGC,KAAK,IAAI;MAChCH,UAAU,CAACK,WAAW,CAACF,KAAK,CAAC;MAC7BP,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGM,KAAK,CAAC;IAC7C,CAAC,CAAC;EACN;AACJ;AAEA,eAAe,CAAChB,WAAW,EAAEW,WAAW,CAAC"},"metadata":{},"sourceType":"module"}