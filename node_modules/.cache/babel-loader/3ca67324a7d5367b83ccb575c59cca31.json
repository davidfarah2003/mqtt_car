{"ast":null,"code":"import { ref } from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n  const mqtt = require('precompiled-mqtt');\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000\n    // Auth\n    //clientId: 'emqx_test',\n    //username: 'emqx_test',\n    //password: 'emqx_test',\n  };\n\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n  let client = ref(null);\n  const connect = async () => {\n    client = ref(await mqtt.connect('mqtt://127.0.0.1:9001'));\n    client.value.on('connect', function () {\n      console.log('Connected');\n      client.value.subscribe('test', function (err) {\n        if (!err) {\n          client.value.publish('test', 'Hello mqtt');\n        }\n      });\n    });\n    client.value.on('message', function (topic, message) {\n      // message is Buffer\n      console.log(message.toString());\n    });\n  };\n  return {\n    connect,\n    asyncClient\n  };\n};\nexport default getMqttClient;","map":{"version":3,"names":["ref","mqtt","getMqttClient","require","options","clean","connectTimeout","client","connect","value","on","console","log","subscribe","err","publish","topic","message","toString","asyncClient"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n    const mqtt = require('precompiled-mqtt')\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        //clientId: 'emqx_test',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n    }\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    let client = ref(null)\n\n    const connect = async () => {\n        client  = ref( await mqtt.connect('mqtt://127.0.0.1:9001'))\n\n        client.value.on('connect', function () {\n            console.log('Connected')\n            client.value.subscribe('test', function (err) {\n                if (!err) {\n                    client.value.publish('test', 'Hello mqtt')\n                }\n            })\n        });\n\n        client.value.on('message', function (topic, message) {\n            // message is Buffer\n            console.log(message.toString())\n        });\n    }\n\n    return {connect, asyncClient}\n}\n\nexport default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;AACvB,OAAOC,IAAI,MAAM,kBAAkB;;AAEnC;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,MAAM;EACxB,MAAMD,IAAI,GAAGE,OAAO,CAAC,kBAAkB,CAAC;EACxC,MAAMC,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE;IAChB;IACA;IACA;IACA;EACJ,CAAC;;EAED;;EAEA,IAAIC,MAAM,GAAGP,GAAG,CAAC,IAAI,CAAC;EAEtB,MAAMQ,OAAO,GAAG,YAAY;IACxBD,MAAM,GAAIP,GAAG,CAAE,MAAMC,IAAI,CAACO,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAE3DD,MAAM,CAACE,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,YAAY;MACnCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBL,MAAM,CAACE,KAAK,CAACI,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;QAC1C,IAAI,CAACA,GAAG,EAAE;UACNP,MAAM,CAACE,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFR,MAAM,CAACE,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;MACjD;MACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;IACnC,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAACV,OAAO;IAAEW;EAAW,CAAC;AACjC,CAAC;AAED,eAAejB,aAAa"},"metadata":{},"sourceType":"module"}