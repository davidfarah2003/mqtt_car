{"ast":null,"code":"import _regeneratorRuntime from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/home/davidf/Desktop/EPFL/mqtt_car/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { computed, inject, onActivated, onDeactivated, ref } from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\nexport default {\n  setup: function setup() {\n    var connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    var dataObject = ref({}); //Object containing all our actual data, gets updated depending on subscribed topics\n    var inputOptions = ref(null);\n    var root_name = \"dahu\";\n    var dataIsPresent = ref(false);\n    var inputOptionsIsPresent = ref(false);\n    var isActive = ref(false); //indicate if the Home component is isActive\n\n    /**\n     * Callback activated when the component is being rendered\n     */\n    onActivated(function () {\n      isActive.value = true;\n      mqttUtil.resubscribeAll();\n    });\n\n    /**\n     * Callback activated when the component stops being rendered\n     */\n    onDeactivated(function () {\n      isActive.value = false;\n      mqttUtil.unsubscribeAll();\n    });\n    buildDataObjects();\n\n    /**\n     * Create an mqttUtils instance with arguments the client and a callback to update data\n     * @type {MqttUtils}\n     */\n    var mqttUtil = new mqttUtils(inject('mqttClient'), function (topic, message) {\n      mqttUtils.updateDataFromJSON(message, dataObject, dataIsPresent.value);\n    });\n    addConnectedListeners();\n\n    /**\n     * Use the configuration fetched from the api to build the dataObject\n     */\n    function buildDataObjects() {\n      return _buildDataObjects.apply(this, arguments);\n    }\n    /**\n     * Add listeners to update the connected status\n     */\n    function _buildDataObjects() {\n      _buildDataObjects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var apiClient;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                apiClient = inject('apiClient');\n                _context.next = 3;\n                return apiClient.getConfig(\"CAN_out_config\").then(function (outConfig) {\n                  var configUtilOut = new configUtils(outConfig);\n                  dataObject.value = configUtilOut.getDataObject();\n                  dataIsPresent.value = true;\n                });\n              case 3:\n                _context.next = 5;\n                return apiClient.getConfig(\"CAN_in_config\").then(function (inConfig) {\n                  inputOptions.value = inConfig;\n                  inputOptionsIsPresent.value = true;\n                });\n              case 5:\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  if (dataIsPresent && inputOptionsIsPresent) resolve();\n                }));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _buildDataObjects.apply(this, arguments);\n    }\n    function addConnectedListeners() {\n      if (mqttUtil.connected()) connected.value = true;\n      mqttUtil.on('connect', function () {\n        return connected.value = true;\n      });\n      mqttUtil.on('disconnect', function () {\n        return connected.value = false;\n      });\n      mqttUtil.on('reconnect', function () {\n        return connected.value = false;\n      });\n    }\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings: Component/Group\n     */\n    var subscribeToFields = function subscribeToFields(requiredValues) {\n      var fieldPathArray = [];\n      Object.entries(requiredValues).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          fieldPath = _ref2[1];\n        fieldPathArray = fieldPath.split(\"/\");\n        mqttUtil.subscribeTo([\"\".concat(root_name, \"/\").concat(fieldPathArray[0], \"/\").concat(fieldPathArray[1])]);\n      });\n    };\n\n    /**\n     * Update from the dataObject, the data  of a module based on their required fields\n     * @param requiredFields array of required values containing path Strings: \"Component/Group/Field\"\n     * @param childData The data object of the module. Follows the convention:\n     *    {fieldAlias : groupObject} if the desired field is * (3rd value in the path) (refer to documentation for structure)\n     *    {fieldAlias : [value, unit]} otherwise\n     * Where fieldAlias is the name indicated in the childData and not in the main configuration file\n     */\n    var updateChildData = function updateChildData(requiredFields, childData) {\n      var fieldPathArray = [];\n      Object.entries(requiredFields).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          fieldAlias = _ref4[0],\n          fieldPath = _ref4[1];\n        try {\n          fieldPathArray = fieldPath.split(\"/\");\n          if (fieldPathArray[2] === \"*\") {\n            childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]];\n          } else {\n            childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]];\n          }\n        } catch (error) {\n          if (error instanceof TypeError) {\n            throw new Error(\"The path \" + fieldPath + \" doesn't exist in the configuration\");\n          } else {\n            throw error;\n          }\n        }\n      });\n    };\n\n    /**\n     * Return true if a child module can request an update, false otherwise\n     * We use dataIsPresent instead of the dataObject because it could be partially written (not null but not ready)\n     * @type {ComputedRef<boolean>}\n     */\n    var canUpdateChildData = computed(function () {\n      return dataIsPresent.value && isActive.value;\n    });\n    return {\n      dataObject: dataObject,\n      connected: connected,\n      subscribeToFields: subscribeToFields,\n      updateChildData: updateChildData,\n      canUpdateChildData: canUpdateChildData,\n      dataIsPresent: dataIsPresent,\n      mqttUtil: mqttUtil,\n      inputOptions: inputOptions,\n      inputOptionsIsPresent: inputOptionsIsPresent\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","inject","onActivated","onDeactivated","ref","mqttUtils","configUtils","setup","connected","dataObject","inputOptions","root_name","dataIsPresent","inputOptionsIsPresent","isActive","value","mqttUtil","resubscribeAll","unsubscribeAll","buildDataObjects","topic","message","updateDataFromJSON","addConnectedListeners","apiClient","getConfig","then","outConfig","configUtilOut","getDataObject","inConfig","Promise","resolve","on","subscribeToFields","requiredValues","fieldPathArray","Object","entries","forEach","fieldPath","split","subscribeTo","updateChildData","requiredFields","childData","fieldAlias","error","TypeError","Error","canUpdateChildData"],"sourceRoot":"","sources":["/home/davidf/Desktop/EPFL/mqtt_car/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :dataObject=\"dataObject\"\n          :inputOptions=\"inputOptions\"\n          :subscribeToFields=\"subscribeToFields\"\n          :updateChildData=\"updateChildData\"\n          :canUpdateChildData=\"canUpdateChildData\"\n          :dataIsPresent=\"dataIsPresent\"\n          :inputOptionsIsPresent=\"inputOptionsIsPresent\"\n          :mqttUtil=\"mqttUtil\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {computed, inject, onActivated, onDeactivated, ref} from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\n\nexport default {\n  setup: function () {\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({})  //Object containing all our actual data, gets updated depending on subscribed topics\n    let inputOptions = ref(null);\n\n    let root_name = \"dahu\"\n\n    let dataIsPresent = ref(false)\n    let inputOptionsIsPresent = ref(false)\n\n    let isActive = ref(false);  //indicate if the Home component is isActive\n\n    /**\n     * Callback activated when the component is being rendered\n     */\n    onActivated(()=> {\n      isActive.value = true\n      mqttUtil.resubscribeAll()\n    })\n\n    /**\n     * Callback activated when the component stops being rendered\n     */\n    onDeactivated(()=> {\n      isActive.value = false\n      mqttUtil.unsubscribeAll()\n    })\n\n    buildDataObjects()\n\n    /**\n     * Create an mqttUtils instance with arguments the client and a callback to update data\n     * @type {MqttUtils}\n     */\n    const mqttUtil = new mqttUtils(inject('mqttClient'), (topic, message) => {mqttUtils.updateDataFromJSON(message, dataObject, dataIsPresent.value)})\n\n    addConnectedListeners()\n\n    /**\n     * Use the configuration fetched from the api to build the dataObject\n     */\n    async function buildDataObjects(){\n      let apiClient = inject('apiClient');\n\n      await apiClient.getConfig(\"CAN_out_config\").then((outConfig)=> {\n        let configUtilOut = new configUtils(outConfig)\n        dataObject.value = configUtilOut.getDataObject()\n        dataIsPresent.value = true\n      })\n\n      await apiClient.getConfig(\"CAN_in_config\").then((inConfig)=> {\n        inputOptions.value = inConfig\n        inputOptionsIsPresent.value = true\n      })\n\n      return new Promise((resolve) => {if (dataIsPresent && inputOptionsIsPresent) resolve();})\n    }\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners(){\n      if(mqttUtil.connected()) connected.value = true\n      mqttUtil.on('connect', () => connected.value = true)\n      mqttUtil.on('disconnect', () => connected.value = false)\n      mqttUtil.on('reconnect', () => connected.value = false)\n    }\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings: Component/Group\n     */\n    const subscribeToFields = (requiredValues) => {\n      let fieldPathArray = []\n      Object.entries(requiredValues).forEach(([, fieldPath])=>{\n        fieldPathArray = fieldPath.split(\"/\")\n        mqttUtil.subscribeTo([`${root_name}/${fieldPathArray[0]}/${fieldPathArray[1]}`])\n      })\n    }\n\n    /**\n     * Update from the dataObject, the data  of a module based on their required fields\n     * @param requiredFields array of required values containing path Strings: \"Component/Group/Field\"\n     * @param childData The data object of the module. Follows the convention:\n     *    {fieldAlias : groupObject} if the desired field is * (3rd value in the path) (refer to documentation for structure)\n     *    {fieldAlias : [value, unit]} otherwise\n     * Where fieldAlias is the name indicated in the childData and not in the main configuration file\n     */\n    const updateChildData = (requiredFields, childData) => {\n      let fieldPathArray = []\n\n      Object.entries(requiredFields).forEach(([fieldAlias, fieldPath]) => {\n        try {\n          fieldPathArray = fieldPath.split(\"/\")\n          if(fieldPathArray[2] === \"*\") {childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]]}\n          else{childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]]}\n        }\n        catch (error){\n          if (error instanceof TypeError) {\n            throw new Error(\"The path \" + fieldPath + \" doesn't exist in the configuration\")\n          } else {throw error;}\n        }\n      })\n    }\n\n    /**\n     * Return true if a child module can request an update, false otherwise\n     * We use dataIsPresent instead of the dataObject because it could be partially written (not null but not ready)\n     * @type {ComputedRef<boolean>}\n     */\n    const canUpdateChildData = computed(()=>{return (dataIsPresent.value && isActive.value)})\n\n    return {dataObject, connected, subscribeToFields, updateChildData, canUpdateChildData, dataIsPresent, mqttUtil, inputOptions, inputOptionsIsPresent}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}