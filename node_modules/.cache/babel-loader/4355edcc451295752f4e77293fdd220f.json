{"ast":null,"code":"import { inject, onActivated, onDeactivated, onUnmounted, ref } from \"vue\";\nimport { setupClient, cleanClient } from \"@/composables/mqttMethods\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n    const subscribedTopics = ['Home']; //Array containing the subscribed topics for this component\n\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false; //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    onActivated(() => {\n      if (!hasBeenSetup) {\n        mounted = true;\n        setupClient(clientPromise, subscribedTopics, mqttSetup);\n      } else {\n        mounted = true;\n        setupClient(clientPromise, subscribedTopics, () => {});\n      }\n    });\n    onDeactivated(() => {\n      mounted = false;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    const mqttSetup = mqttClient => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n      hasBeenSetup = true;\n    };\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (mounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n        }\n      });\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {\n      test,\n      connected,\n      subscribedTopics\n    };\n  }\n};","map":{"version":3,"mappings":"AAWA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AACxE,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IAEjB;IACA,MAAMC,gBAAe,GAAI,CAAC,MAAM,CAAC,EAAE;;IAEnC,MAAMC,aAAY,GAAIV,MAAM,CAAC,YAAY,GAAG;IAC5C,IAAIW,SAAQ,GAAIP,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,IAAIQ,OAAM,GAAI,KAAK,EAAG;IACtB,IAAIC,YAAW,GAAI,KAAK;IAExB,IAAIC,IAAG,GAAIV,GAAG,CAACW,GAAG,CAAC;;IAEnB;;;IAGAZ,WAAW,CAAC,MAAK;MACfG,WAAW,CAACI,aAAa,EAAED,gBAAgB;IAC7C,CAAC,CAAC;IAEFR,WAAW,CAAC,MAAK;MACf,IAAI,CAACY,YAAY,EAAE;QACjBD,OAAM,GAAI,IAAG;QACbP,WAAW,CAACK,aAAa,EAAED,gBAAgB,EAAEO,SAAS;MACxD,OAAO;QACLJ,OAAM,GAAI,IAAG;QACbP,WAAW,CAACK,aAAa,EAAED,gBAAgB,EAAE,MAAM,CAAC,CAAC;MACvD;IACF,CAAC;IAEDP,aAAa,CAAC,MAAK;MACjBU,OAAM,GAAI,KAAI;MACdN,WAAW,CAACI,aAAa,EAAED,gBAAgB;IAC7C,CAAC;IAED,MAAMO,SAAQ,GAAKC,UAAU,IAAK;MAChC;MACAC,eAAe,CAACD,UAAU;MAC1BJ,YAAW,GAAI,IAAG;IACpB;;IAEA;;;IAGA,SAASK,eAAe,CAACD,UAAU,EAAC;MAChC;MACA,IAAGA,UAAU,CAACN,SAAS,EAAEA,SAAS,CAACQ,KAAI,GAAI,IAAG;MAC9CF,UAAU,CAACG,EAAE,CAAC,SAAS,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,IAAI;MACrDF,UAAU,CAACG,EAAE,CAAC,YAAY,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,KAAK;MACzDF,UAAU,CAACG,EAAE,CAAC,WAAW,EAAE,MAAMT,SAAS,CAACQ,KAAI,GAAI,KAAK;MAExDF,UAAU,CAACG,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGV,OAAO,EAAC;UACTW,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIH,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACG,QAAQ,EAAE;UACpEX,IAAI,CAACK,KAAI,GAAIG,OAAM;QACrB;MACF,CAAC;IACL;;IAEA;IACA,OAAO;MAACR,IAAI;MAAEH,SAAS;MAAEF;IAAgB;EAC3C;AACF","names":["inject","onActivated","onDeactivated","onUnmounted","ref","setupClient","cleanClient","name","setup","subscribedTopics","clientPromise","connected","mounted","hasBeenSetup","test","NaN","mqttSetup","mqttClient","updateVariables","value","on","topic","message","console","log","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  <h1> Home </h1>\n  <h1 v-if=\"connected\">Connected</h1>\n  <h1 v-else>Disconnected</h1>\n\n  <h3>Data: {{test}}</h3>\n  <h4>Subscribed topics: {{subscribedTopics}}</h4>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onUnmounted, ref} from \"vue\";\nimport {setupClient, cleanClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n    const subscribedTopics = ['Home']; //Array containing the subscribed topics for this component\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false;  //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    onActivated(()=> {\n      if (!hasBeenSetup) {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, mqttSetup)\n      } else {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, () => {})\n      }\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    const mqttSetup = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n      hasBeenSetup = true\n    }\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n        //Update connected status correctly\n        if(mqttClient.connected) connected.value = true\n        mqttClient.on('connect', () => connected.value = true)\n        mqttClient.on('disconnect', () => connected.value = false)\n        mqttClient.on('reconnect', () => connected.value = false)\n\n        mqttClient.on('message', (topic, message)=>{\n          if(mounted){\n            console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n            test.value = message\n          }\n        })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected, subscribedTopics}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}