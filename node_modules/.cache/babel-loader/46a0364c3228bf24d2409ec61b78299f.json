{"ast":null,"code":"import { computed, inject, onMounted, onUnmounted, ref } from \"vue\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    const subscribedTopics = ['hello', 'world', 'bitch'];\n    let test = ref(NaN);\n    let mqttClient = null;\n    onMounted(() => {\n      inject('mqttClient').then(client => {\n        mqttClient = client;\n        setupClient();\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      console.log(mqttClient);\n      if (mqttClient) cleanClient();\n    });\n    function setupClient() {\n      if (mqttClient) {\n        subscribedTopics.forEach(topic => {\n          mqttClient.subscribe(topic);\n          console.log(\"subscribed to \" + topic);\n        });\n        updateVariables();\n      }\n    }\n    function cleanClient() {\n      if (mqttClient) {\n        subscribedTopics.forEach(topic => {\n          mqttClient.unsubscribe(topic);\n          console.log(\"unsubscribed from \" + topic);\n        });\n      }\n    }\n    let connected = ref(false);\n    let connecteded = ref(computed(() => {\n      if (mqttClient) {\n        connected = mqttClient.connected;\n        return connected;\n      }\n      return true;\n    }));\n    function updateVariables() {\n      mqttClient.on('message', (topic, message) => {\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n        test.value = message;\n      });\n    }\n    return {\n      test,\n      connecteded\n    };\n  }\n};","map":{"version":3,"mappings":"AASA,SAAQA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AAEjE,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IACjB,MAAMC,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAEpD,IAAIC,IAAG,GAAIJ,GAAG,CAACK,GAAG,CAAC;IACnB,IAAIC,UAAS,GAAI,IAAI;IAErBR,SAAS,CAAC,MAAM;MACdD,MAAM,CAAC,YAAY,EACdU,IAAI,CAAEC,MAAM,IAAK;QAChBF,UAAS,GAAIE,MAAK;QAClBC,WAAW,EAAC;MACd,CAAC,EACAC,KAAK,CAAEC,GAAG,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG;MACjB,CAAC,CAAC;IACR,CAAC,CAAC;;IAEF;;;IAGAZ,WAAW,CAAC,MAAK;MACfa,OAAO,CAACC,GAAG,CAACP,UAAU;MACtB,IAAGA,UAAU,EACbQ,WAAW,EAAC;IACd,CAAC,CAAC;IAEF,SAASL,WAAW,GAAG;MACrB,IAAIH,UAAU,EAAE;QACdH,gBAAgB,CAACY,OAAO,CAAGC,KAAK,IAAI;UAClCV,UAAU,CAACW,SAAS,CAACD,KAAK;UAC1BJ,OAAO,CAACC,GAAG,CAAC,gBAAe,GAAIG,KAAK;QACtC,CAAC;QACDE,eAAe,EAAC;MAClB;IACF;IAEA,SAASJ,WAAW,GAAG;MACrB,IAAGR,UAAU,EAAC;QACZH,gBAAgB,CAACY,OAAO,CAAGC,KAAK,IAAI;UAClCV,UAAU,CAACa,WAAW,CAACH,KAAK;UAC5BJ,OAAO,CAACC,GAAG,CAAC,oBAAmB,GAAIG,KAAK;QAC1C,CAAC;MACH;IACF;IAEA,IAAII,SAAQ,GAAIpB,GAAG,CAAC,KAAK;IAEzB,IAAIqB,WAAU,GAAIrB,GAAG,CAACJ,QAAQ,CAAC,MAAI;MACjC,IAAGU,UAAU,EAAC;QACZc,SAAQ,GAAId,UAAU,CAACc,SAAQ;QAC/B,OAAOA,SAAQ;MACjB;MACA,OAAO,IAAG;IAEZ,CAAC,CAAC;IAEF,SAASF,eAAe,GAAE;MACxBZ,UAAU,CAACgB,EAAE,CAAC,SAAS,EAAE,CAACN,KAAK,EAAEO,OAAO,KAAG;QACzCX,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIG,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIO,OAAO,CAACC,QAAQ,EAAE;QACpEpB,IAAI,CAACqB,KAAI,GAAIF,OAAM;MACrB,CAAC;IACH;IAEA,OAAO;MAACnB,IAAI;MAAEiB;IAAW;EAC3B;AACF","names":["computed","inject","onMounted","onUnmounted","ref","name","setup","subscribedTopics","test","NaN","mqttClient","then","client","setupClient","catch","err","console","log","cleanClient","forEach","topic","subscribe","updateVariables","unsubscribe","connected","connecteded","on","message","toString","value"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connecteded\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n\n</template>\n\n<script>\n\nimport {computed, inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n    const subscribedTopics = ['hello', 'world', 'bitch'];\n\n    let test = ref(NaN);\n    let mqttClient = null;\n\n    onMounted(() => {\n      inject('mqttClient')\n          .then((client) => {\n            mqttClient = client\n            setupClient()\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      console.log(mqttClient)\n      if(mqttClient)\n      cleanClient()\n    });\n\n    function setupClient() {\n      if (mqttClient) {\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.subscribe(topic)\n          console.log(\"subscribed to \" + topic)\n        })\n        updateVariables()\n      }\n    }\n\n    function cleanClient() {\n      if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.unsubscribe(topic)\n          console.log(\"unsubscribed from \" + topic)\n        })\n      }\n    }\n\n    let connected = ref(false)\n\n    let connecteded = ref(computed(()=>{\n      if(mqttClient){\n        connected = mqttClient.connected\n        return connected\n      }\n      return true\n\n    }))\n\n    function updateVariables(){\n      mqttClient.on('message', (topic, message)=>{\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n        test.value = message\n      })\n    }\n\n    return {test, connecteded}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}