{"ast":null,"code":"import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\", {\n    connected: _ctx.connected,\n    test: _ctx.test,\n    subscribedTopics: $props.subscribedTopics\n  })]);\n}","map":{"version":3,"mappings":";;EACWA,KAAK,EAAC;AAAU;;uBAAzBC,oBAKU,WALVC,UAKU,GAJRC,YAGEC;IAHKC,SAAS,EAAED,cAAS;IACpBE,IAAI,EAAEF,SAAI;IACVG,gBAAgB,EAAIC","names":["class","_createElementBlock","_hoisted_1","_renderSlot","_ctx","connected","test","subscribedTopics","$props"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :test=\"test\"\n          :subscribedTopics = \"subscribedTopics\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onUnmounted, ref} from \"vue\";\nimport {setupClient, cleanClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  props: ['subscribedTopics', 'dataCallBack'],\n  setup: function (props) {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false;  //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, props.subscribedTopics)\n    });\n\n    onActivated(()=> {\n      if (!hasBeenSetup) {\n        mounted = true\n        setupClient(clientPromise, props.subscribedTopics, mqttSetup)\n      } else {\n        mounted = true\n        setupClient(clientPromise, props.subscribedTopics, () => {})\n      }\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      cleanClient(clientPromise, props.subscribedTopics)\n    })\n\n    const mqttSetup = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n      hasBeenSetup = true\n    }\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n      //Update connected status correctly\n      if(mqttClient.connected) connected.value = true\n      mqttClient.on('connect', () => connected.value = true)\n      mqttClient.on('disconnect', () => connected.value = false)\n      mqttClient.on('reconnect', () => connected.value = false)\n\n      mqttClient.on('message', (topic, message)=>{\n        if(mounted){\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n          test.value = message\n\n          try {\n            if(subscribedTopics.includes(topic)) {\n              props.dataCallBack(message)\n            }\n          }catch (e){\n            console.log(e.message)\n          }\n\n        }\n      })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    let subscribedTopics = props.subscribedTopics;\n\n    return {test, connected, subscribedTopics}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}