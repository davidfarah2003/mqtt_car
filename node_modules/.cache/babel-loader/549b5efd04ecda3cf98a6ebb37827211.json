{"ast":null,"code":"import ConnectedView from \"@/views/ConnectedView\";\nimport { ref } from \"vue\";\nimport retrieveDataFromJSON from \"@/composables/responseUtils\";\nexport default {\n  name: \"Home\",\n  components: {\n    ConnectedView\n  },\n  setup: function () {\n    let subscribedTopics = ['Home']; //Array containing the subscribed topics for this component\n    const sensorData = ref({});\n    let homeData = {\n      FCU: {\n        state_machine: {\n          global_state: -1,\n          flight_state: -1,\n          flight_mode: -1,\n          arming_state: -1\n        },\n        height_sensor: {\n          height_sensor_status: -1,\n          height_measure: NaN\n        },\n        height_filtered: NaN,\n        general_status: -1,\n        event_flags: -1,\n        lat_foil_angle: NaN,\n        main_foil_angle: NaN,\n        back_foil_angle: NaN,\n        speed_sp: NaN,\n        height_sp: NaN,\n        roll_sp: NaN,\n        roll_rate_sp: NaN,\n        height_rate_sp: NaN,\n        pitch_sp: NaN,\n        pitch_rate_sp: NaN,\n        palpeur_altitude_filtered: NaN,\n        heartBeat: NaN\n      },\n      motor_controller_1: {\n        battery_tension: NaN,\n        battery_current: NaN,\n        speed: NaN,\n        ctrl_temp: NaN,\n        pwm_act: NaN,\n        pwm_req: NaN\n      },\n      motor_controller_2: {\n        battery_tension: NaN,\n        battery_current: NaN,\n        speed: NaN,\n        ctrl_temp: NaN,\n        pwm_act: NaN,\n        pwm_req: NaN\n      },\n      main_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN\n      },\n      lat_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN,\n        position_controller_P_gain: NaN,\n        position_controller_I_gain: NaN,\n        position_controller_D_gain: NaN\n      },\n      back_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN\n      },\n      battery: {\n        pack_voltage: NaN,\n        pack_current: NaN,\n        pack_soc: NaN,\n        volt_cell_1: NaN,\n        volt_cell_2: NaN,\n        volt_cell_3: NaN,\n        volt_cell_4: NaN,\n        volt_cell_5: NaN,\n        volt_cell_6: NaN,\n        volt_cell_7: NaN,\n        volt_cell_8: NaN,\n        volt_cell_9: NaN,\n        volt_cell_10: NaN,\n        volt_cell_11: NaN,\n        volt_cell_12: NaN,\n        temp_sens_1: NaN,\n        temp_sens_2: NaN,\n        temp_sens_3: NaN,\n        temp_sens_4: NaN,\n        temp_sens_5: NaN,\n        temp_sens_6: NaN,\n        temp_sens_7: NaN,\n        temp_sens_8: NaN,\n        temp_sens_9: NaN,\n        temp_sens_10: NaN,\n        temp_sens_11: NaN,\n        temp_sens_12: NaN,\n        mppt_1: NaN,\n        mppt_2: NaN,\n        mppt_3: NaN,\n        mppt_4: NaN,\n        mppt_5: NaN,\n        mppt_6: NaN,\n        mppt_7: NaN,\n        mppt_8: NaN,\n        mppt_9: NaN,\n        mppt_10: NaN,\n        temp_BMS: NaN,\n        temp_ext_1: NaN,\n        temp_ext_2: NaN,\n        bms_status: NaN,\n        status: NaN\n      },\n      cockpit_arduino: {\n        speedCommand: NaN,\n        rollCommand: NaN,\n        joystickCommand: NaN,\n        tuningCommand: NaN\n      },\n      palpeur: {\n        palpeur_altitude_1: NaN\n      },\n      CUS_arduino: {\n        waterCooling: NaN,\n        heartBeat: NaN\n      },\n      actuation: {\n        current_main: NaN,\n        current_back: NaN,\n        current_lat: NaN,\n        heartBeat: NaN\n      },\n      arduino_mainbox: {\n        heartBeat: NaN\n      },\n      mesure_altitude: {\n        barometre_mainbox: NaN,\n        barometre_palpeur: NaN,\n        IR_mainbox: NaN,\n        IR_palpeur: NaN\n      }\n    };\n    let dataCallBack = receivedData => {\n      retrieveDataFromJSON(receivedData, sensorData);\n      console.log(sensorData);\n    };\n    return {\n      subscribedTopics,\n      dataCallBack,\n      sensorData\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["ConnectedView","ref","retrieveDataFromJSON","name","components","setup","subscribedTopics","sensorData","homeData","FCU","state_machine","global_state","flight_state","flight_mode","arming_state","height_sensor","height_sensor_status","height_measure","NaN","height_filtered","general_status","event_flags","lat_foil_angle","main_foil_angle","back_foil_angle","speed_sp","height_sp","roll_sp","roll_rate_sp","height_rate_sp","pitch_sp","pitch_rate_sp","palpeur_altitude_filtered","heartBeat","motor_controller_1","battery_tension","battery_current","speed","ctrl_temp","pwm_act","pwm_req","motor_controller_2","main_position_motor","modes_of_operation_display","current_demand_value","velocity_demand_value","position_demand_value","position_actual_value","statusword","error_code","lat_position_motor","position_controller_P_gain","position_controller_I_gain","position_controller_D_gain","back_position_motor","battery","pack_voltage","pack_current","pack_soc","volt_cell_1","volt_cell_2","volt_cell_3","volt_cell_4","volt_cell_5","volt_cell_6","volt_cell_7","volt_cell_8","volt_cell_9","volt_cell_10","volt_cell_11","volt_cell_12","temp_sens_1","temp_sens_2","temp_sens_3","temp_sens_4","temp_sens_5","temp_sens_6","temp_sens_7","temp_sens_8","temp_sens_9","temp_sens_10","temp_sens_11","temp_sens_12","mppt_1","mppt_2","mppt_3","mppt_4","mppt_5","mppt_6","mppt_7","mppt_8","mppt_9","mppt_10","temp_BMS","temp_ext_1","temp_ext_2","bms_status","status","cockpit_arduino","speedCommand","rollCommand","joystickCommand","tuningCommand","palpeur","palpeur_altitude_1","CUS_arduino","waterCooling","actuation","current_main","current_back","current_lat","arduino_mainbox","mesure_altitude","barometre_mainbox","barometre_palpeur","IR_mainbox","IR_palpeur","dataCallBack","receivedData","console","log"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n\n    <connected-view  v-slot=\"data\" :subscribedTopics=\"subscribedTopics\" :dataCallBack=\"dataCallBack\">\n      <h1> Home </h1>\n      <h1 v-if=\"data.connected\">Connected</h1>\n      <h1 v-else>Disconnected</h1>\n\n      <h3>Data: {{sensorData[\"somseNamse/namez\"]}}</h3>\n      <h4>Subscribed topics: {{data.subscribedTopics}}</h4>\n    </connected-view>\n\n  </section>\n</template>\n\n<script>\nimport ConnectedView from \"@/views/ConnectedView\";\nimport {ref} from \"vue\";\nimport retrieveDataFromJSON from \"@/composables/responseUtils\";\n\nexport default {\n  name: \"Home\",\n  components: {ConnectedView},\n\n\n  setup: function () {\n    let subscribedTopics = ['Home']; //Array containing the subscribed topics for this component\n    const sensorData = ref({})\n\n\n    let homeData = {\n      FCU: {\n        state_machine: {\n          global_state: -1,\n          flight_state: -1,\n          flight_mode: -1,\n          arming_state: -1,\n        },\n        height_sensor: {\n          height_sensor_status : -1,\n          height_measure: NaN\n        },\n        \n\n\n        height_filtered: NaN,\n        general_status: -1,\n        event_flags: -1,\n        lat_foil_angle: NaN,\n        main_foil_angle: NaN,\n        back_foil_angle: NaN,\n        speed_sp: NaN,\n        height_sp: NaN,\n        roll_sp: NaN,\n        roll_rate_sp: NaN,\n        height_rate_sp: NaN,\n        pitch_sp: NaN,\n        pitch_rate_sp: NaN,\n        palpeur_altitude_filtered: NaN,\n        heartBeat: NaN,\n      },\n\n      motor_controller_1: {\n        battery_tension: NaN,\n        battery_current: NaN,\n        speed: NaN,\n        ctrl_temp: NaN,\n        pwm_act: NaN,\n        pwm_req: NaN,\n      },\n\n      motor_controller_2: {\n        battery_tension: NaN,\n        battery_current: NaN,\n        speed: NaN,\n        ctrl_temp: NaN,\n        pwm_act: NaN,\n        pwm_req: NaN,\n      },\n\n      main_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN,\n      },\n\n      lat_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN,\n        position_controller_P_gain: NaN,\n        position_controller_I_gain: NaN,\n        position_controller_D_gain: NaN,\n      },\n\n      back_position_motor: {\n        modes_of_operation_display: NaN,\n        current_demand_value: NaN,\n        velocity_demand_value: NaN,\n        position_demand_value: NaN,\n        position_actual_value: NaN,\n        statusword: NaN,\n        error_code: NaN,\n      },\n\n      battery: {\n        pack_voltage: NaN,\n        pack_current: NaN,\n        pack_soc: NaN,\n        volt_cell_1: NaN,\n        volt_cell_2: NaN,\n        volt_cell_3: NaN,\n        volt_cell_4: NaN,\n        volt_cell_5: NaN,\n        volt_cell_6: NaN,\n        volt_cell_7: NaN,\n        volt_cell_8: NaN,\n        volt_cell_9: NaN,\n        volt_cell_10: NaN,\n        volt_cell_11: NaN,\n        volt_cell_12: NaN,\n        temp_sens_1: NaN,\n        temp_sens_2: NaN,\n        temp_sens_3: NaN,\n        temp_sens_4: NaN,\n        temp_sens_5: NaN,\n        temp_sens_6: NaN,\n        temp_sens_7: NaN,\n        temp_sens_8: NaN,\n        temp_sens_9: NaN,\n        temp_sens_10: NaN,\n        temp_sens_11: NaN,\n        temp_sens_12: NaN,\n        mppt_1: NaN,\n        mppt_2: NaN,\n        mppt_3: NaN,\n        mppt_4: NaN,\n        mppt_5: NaN,\n        mppt_6: NaN,\n        mppt_7: NaN,\n        mppt_8: NaN,\n        mppt_9: NaN,\n        mppt_10: NaN,\n        temp_BMS: NaN,\n        temp_ext_1: NaN,\n        temp_ext_2: NaN,\n        bms_status: NaN,\n        status: NaN,\n      },\n\n      cockpit_arduino: {\n        speedCommand: NaN,\n        rollCommand: NaN,\n        joystickCommand: NaN,\n        tuningCommand: NaN,\n      },\n\n      palpeur: { palpeur_altitude_1: NaN },\n\n      CUS_arduino: { waterCooling: NaN, heartBeat: NaN },\n\n      actuation: {\n        current_main: NaN,\n        current_back: NaN,\n        current_lat: NaN,\n        heartBeat: NaN,\n      },\n\n      arduino_mainbox: { heartBeat: NaN },\n      mesure_altitude: {\n        barometre_mainbox: NaN,\n        barometre_palpeur: NaN,\n        IR_mainbox: NaN,\n        IR_palpeur: NaN,\n      },\n    }\n\n    let dataCallBack = (receivedData) => {\n      retrieveDataFromJSON(receivedData, sensorData)\n\n      console.log(sensorData)\n    }\n    return {subscribedTopics, dataCallBack, sensorData}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}