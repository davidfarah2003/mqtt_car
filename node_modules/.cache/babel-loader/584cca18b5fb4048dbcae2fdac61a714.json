{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-297d0747\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.initialized ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dataObject, (values, fieldName) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass(values[0] === 0 ? 'green' : 'red'),\n      key: values[0]\n    }, null, 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;;;;SACcA,kBAAW,kBAAvBC,oBAGO,wCAFLA,oBACMC,6BADqEF,iBAAU,GAAhCG,MAAM,EAAEC,SAAS;yBAAtEH,oBACM;MADAI,KAAK,kBAAEF,MAAM;MAAqEG,GAAG,EAAEH,MAAM","names":["$setup","_createElementBlock","_Fragment","values","fieldName","class","key"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/Home/Status_panel.vue"],"sourcesContent":["<template>\n  <span v-if=\"initialized\">\n    <div :class=\"values[0]===0 ? 'green': 'red'\" v-for=\"(values, fieldName) in dataObject\" :key=\"values[0]\">\n    </div>\n  </span>\n</template>\n\n<script>\nimport {computed, ref, watch} from \"vue\";\n\nexport default {\n  name: \"Status_panel\",\n  props: ['canUpdate'],\n  emits: ['subscribeFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n      \"M1\": \"motor_controller_1/pwm/warnings\",\n      \"M2\": \"motor_controller_2/pwm/warnings\",\n      \"Main foil\": \"main_position_motor/txpdo_1/statusword\",\n      \"Back foil\": \"back_position_motor/txpdo_1/statusword\",\n      \"Lat foil\": \"lat_position_motor/txpdo_1/statusword\",\n      \"FCU\": \"fcu/status_01/general_status\",\n      \"IMU\": \"imu/status_01/general_status\",\n      \"Battery\": \"battery/pack_info/status\",\n      \"Height Sensor\": \"fcu/height_sensor/height_sensor_status\",\n    }\n\n    emit(\"subscribeFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 200 )\n\n    let statuses = computed(()=>{\n      if (dataObject.value) {\n        return {}\n      }\n      return {}\n    })\n\n    return {dataObject, initialized}\n  }\n}\n</script>\n\n<style scoped>\n.green {\n  background: green;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\n.red {\n  background: red;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\nspan {\n  border: 1px solid red;\n}\n</style>"]},"metadata":{},"sourceType":"module"}