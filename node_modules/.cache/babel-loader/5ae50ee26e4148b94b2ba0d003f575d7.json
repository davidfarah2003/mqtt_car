{"ast":null,"code":"import { inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref } from \"vue\";\nimport { setupClient, cleanClient } from \"@/composables/mqttMethods\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient(clientPromise, subscribedTopics, mqttCallBack);\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    onActivated(() => {\n      currMounted = true;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    onDeactivated(() => {\n      currMounted = false;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    const mqttCallBack = mqttClient => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n    };\n\n    /*---------------------------------- MQTT Client related methods and variables -----------------------------------*/\n\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let currMounted = false; //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      console.log(\"test\");\n\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (currMounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n        }\n      });\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {\n      test,\n      connected\n    };\n  }\n};","map":{"version":3,"mappings":"AAQA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,GAAG,QAAO,KAAK;AAC5F,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IAEjB;;IAEA;;;IAGAP,SAAS,CAAC,MAAM;MACdI,WAAW,CAACI,aAAa,EAAEC,gBAAgB,EAAEC,YAAY;IAC3D,CAAC,CAAC;;IAEF;;;IAGAT,WAAW,CAAC,MAAK;MACfI,WAAW,CAACG,aAAa,EAAEC,gBAAgB;IAC7C,CAAC,CAAC;IAEFX,WAAW,CAAC,MAAK;MACfa,WAAU,GAAI,IAAG;MACjBN,WAAW,CAACG,aAAa,EAAEC,gBAAgB;IAC7C,CAAC;IAEDV,aAAa,CAAC,MAAK;MACjBY,WAAU,GAAI,KAAI;MAClBN,WAAW,CAACG,aAAa,EAAEC,gBAAgB;IAC7C,CAAC;IAED,MAAMC,YAAW,GAAKE,UAAU,IAAK;MACnC;MACAC,eAAe,CAACD,UAAU;IAC5B;;IAEA;;IAEA,MAAMJ,aAAY,GAAIX,MAAM,CAAC,YAAY,GAAG;IAC5C,MAAMY,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;IACtD,IAAIK,SAAQ,GAAIX,GAAG,CAAC,KAAK,CAAC,EAAE;;IAI5B;IACA,IAAIY,IAAG,GAAIZ,GAAG,CAACa,GAAG,CAAC;IACnB,IAAIL,WAAU,GAAI,KAAK,EAAG;;IAE1B;;;IAGA,SAASE,eAAe,CAACD,UAAU,EAAC;MAChCK,OAAO,CAACC,GAAG,CAAC,MAAM;;MAElB;MACA,IAAGN,UAAU,CAACE,SAAS,EAAEA,SAAS,CAACK,KAAI,GAAI,IAAG;MAC9CP,UAAU,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAMN,SAAS,CAACK,KAAI,GAAI,IAAI;MACrDP,UAAU,CAACQ,EAAE,CAAC,YAAY,EAAE,MAAMN,SAAS,CAACK,KAAI,GAAI,KAAK;MACzDP,UAAU,CAACQ,EAAE,CAAC,WAAW,EAAE,MAAMN,SAAS,CAACK,KAAI,GAAI,KAAK;MAExDP,UAAU,CAACQ,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGX,WAAW,EAAC;UACbM,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIG,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACC,QAAQ,EAAE;UACpER,IAAI,CAACI,KAAI,GAAIG,OAAM;QACrB;MACF,CAAC;IACL;;IAEA;IACA,OAAO;MAACP,IAAI;MAAED;IAAS;EACzB;AACF","names":["inject","onActivated","onDeactivated","onMounted","onUnmounted","provide","ref","setupClient","cleanClient","name","setup","clientPromise","subscribedTopics","mqttCallBack","currMounted","mqttClient","updateVariables","connected","test","NaN","console","log","value","on","topic","message","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connected\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref} from \"vue\";\nimport {setupClient, cleanClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient(clientPromise, subscribedTopics, mqttCallBack)\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    onActivated(()=> {\n      currMounted = true\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    onDeactivated(()=> {\n      currMounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    const mqttCallBack = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n    }\n\n    /*---------------------------------- MQTT Client related methods and variables -----------------------------------*/\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let currMounted = false;  //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n        console.log(\"test\")\n\n        //Update connected status correctly\n        if(mqttClient.connected) connected.value = true\n        mqttClient.on('connect', () => connected.value = true)\n        mqttClient.on('disconnect', () => connected.value = false)\n        mqttClient.on('reconnect', () => connected.value = false)\n\n        mqttClient.on('message', (topic, message)=>{\n          if(currMounted){\n            console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n            test.value = message\n          }\n        })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}