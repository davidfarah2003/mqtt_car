{"ast":null,"code":"import { ref } from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = async () => {\n  //const mqtt = require('precompiled-mqtt')\n  const mqtt = require('mqtt');\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000\n    // Auth\n    //clientId: 'emqx_test',\n    //username: 'emqx_test',\n    //password: 'emqx_test',\n  };\n\n  let client = ref(null);\n\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n  const connect = () => {\n    return new Promise((resolve, reject) => {\n      client = ref(mqtt.connect('mqtt://127.0.0.1:9001'));\n      if (client) {\n        resolve('Promise is resolved successfully.');\n      } else {\n        reject('Promise is rejected');\n      }\n    });\n  };\n  await connect();\n\n  /*    let client = await connect()\n          .then((message) => {console.log(message)})\n          .catch((message) => {console.log(message)})*/\n\n  client.value.on('connect', function () {\n    console.log('Connected');\n    client.value.subscribe('test', function (err) {\n      if (!err) {\n        client.value.publish('test', 'Hello mqtt');\n      }\n    });\n  });\n  client.value.on('message', function (topic, message) {\n    // message is Buffer\n    console.log(message.toString());\n  });\n  return {\n    client\n  };\n};\nexport default getMqttClient;","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","options","clean","connectTimeout","client","connect","Promise","resolve","reject","value","on","console","log","subscribe","err","publish","topic","message","toString"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = async () => {\n    //const mqtt = require('precompiled-mqtt')\n    const mqtt = require('mqtt')\n\n\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        //clientId: 'emqx_test',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n    };\n\n    let client = ref(null);\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n    const connect = () => {\n        return new Promise((resolve, reject)=> {\n            client = ref(mqtt.connect('mqtt://127.0.0.1:9001'))\n\n            if(client) {\n                resolve('Promise is resolved successfully.');\n            } else {\n                reject('Promise is rejected');\n            }\n        })\n    }\n\n    await connect()\n\n/*    let client = await connect()\n        .then((message) => {console.log(message)})\n        .catch((message) => {console.log(message)})*/\n\n    client.value.on('connect', function () {\n        console.log('Connected')\n        client.value.subscribe('test', function (err) {\n            if (!err) {\n                client.value.publish('test', 'Hello mqtt')\n            }\n        })\n    });\n\n    client.value.on('message', function (topic, message) {\n        // message is Buffer\n        console.log(message.toString())\n    });\n\n    return {client}\n}\n\nexport default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;;AAEvB;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,YAAY;EAC9B;EACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EAG5B,MAAMC,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE;IAChB;IACA;IACA;IACA;EACJ,CAAC;;EAED,IAAIC,MAAM,GAAGP,GAAG,CAAC,IAAI,CAAC;;EAEtB;EACA,MAAMQ,OAAO,GAAG,MAAM;IAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnCJ,MAAM,GAAGP,GAAG,CAACE,IAAI,CAACM,OAAO,CAAC,uBAAuB,CAAC,CAAC;MAEnD,IAAGD,MAAM,EAAE;QACPG,OAAO,CAAC,mCAAmC,CAAC;MAChD,CAAC,MAAM;QACHC,MAAM,CAAC,qBAAqB,CAAC;MACjC;IACJ,CAAC,CAAC;EACN,CAAC;EAED,MAAMH,OAAO,EAAE;;EAEnB;AACA;AACA;;EAEID,MAAM,CAACK,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,YAAY;IACnCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxBR,MAAM,CAACK,KAAK,CAACI,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;MAC1C,IAAI,CAACA,GAAG,EAAE;QACNV,MAAM,CAACK,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEFX,MAAM,CAACK,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;IACjD;IACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;EACnC,CAAC,CAAC;EAEF,OAAO;IAACd;EAAM,CAAC;AACnB,CAAC;AAED,eAAeN,aAAa"},"metadata":{},"sourceType":"module"}