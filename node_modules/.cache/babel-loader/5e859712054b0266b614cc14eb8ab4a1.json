{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-297d0747\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"Broker connection:\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", null, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_hoisted_1, _createTextVNode(), _createElementVNode(\"div\", {\n    class: _normalizeClass($setup.connected ? 'green' : 'red')\n  }, null, 2 /* CLASS */)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dataObject, (values, fieldName) => {\n    return _openBlock(), _createElementBlock(\"li\", null, [_createElementVNode(\"div\", null, _toDisplayString(fieldName) + \":\", 1 /* TEXT */), _createTextVNode(), _createElementVNode(\"div\", {\n      class: _normalizeClass(values[0] === 0 ? 'green' : 'red')\n    }, null, 2 /* CLASS */)]);\n  }), 256 /* UNKEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;gEAGWA,oBAA6B,aAAxB,oBAAkB;;;uBAFhCC,oBAOO,eANLD,oBAKK,aAJHA,oBAAmF,aAA9EE,UAA6B,sBAACF,oBAA0C;IAApCG,KAAK,kBAAEC,gBAAS;gDACzDH,oBAEKI,6BAF6BD,iBAAU,GAAhCE,MAAM,EAAEC,SAAS;yBAA7BN,oBAEK,aADHD,oBAAyB,8BAAlBO,SAAS,IAAE,GAAC,qCAAOP,oBAA8C;MAAxCG,KAAK,kBAAEG,MAAM","names":["_createElementVNode","_createElementBlock","_hoisted_1","class","$setup","_Fragment","values","fieldName"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/Home/Status_panel.vue"],"sourcesContent":["<template>\n  <span>\n    <ul>\n      <li> <div>Broker connection:</div> <div :class=\"connected ? 'green': 'red'\"/> </li>\n      <li v-for=\"(values, fieldName) in dataObject\">\n        <div>{{fieldName}}:</div> <div :class=\"values[0]===0 ? 'green': 'red'\"/>\n      </li>\n    </ul>\n  </span>\n</template>\n\n<script>\nimport {ref, watch} from \"vue\";\n\nexport default {\n  name: \"Status_panel\",\n  props: ['canUpdate', 'connected'],\n  emits: ['subscribeFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n      \"Motor 1\": \"motor_controller_1/pwm/warnings\",\n      \"Motor 2\": \"motor_controller_2/pwm/warnings\",\n      \"Main foil\": \"main_position_motor/txpdo_1/statusword\",\n      \"Back foil\": \"back_position_motor/txpdo_1/statusword\",\n      \"Lat foil\": \"lat_position_motor/txpdo_1/statusword\",\n      \"FCU\": \"fcu/status_01/general_status\",\n      \"IMU\": \"imu/status_01/general_status\",\n      \"Battery\": \"battery/pack_info/status\",\n      \"Height Sensor\": \"fcu/height_sensor/height_sensor_status\",\n    }\n\n    let connected = ref(props.connected)\n    watch(()=>props.connected, ()=>{\n      connected.value = props.connected\n    })\n\n    emit(\"subscribeFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 1000)\n\n    return {dataObject, initialized, connected}\n  }\n}\n</script>\n\n<style scoped>\n.green {\n  background: green;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\n.red {\n  background: red;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\nli {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n}\n\nli div {\n  color: orange;\n}\n\nspan {\n  border: 1px solid red;\n}\n</style>"]},"metadata":{},"sourceType":"module"}