{"ast":null,"code":"import { computed, inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref, watch } from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\nexport default {\n  setup: function () {\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({}); //Object containing all our actual data, gets updated depending on subscribed topics\n    let inputOptions = ref(null);\n    let dataIsPresent = ref(false);\n    let inputOptionsIsPresent = ref(false);\n    let isActive = ref(false); //indicate if the Home component is isActive\n\n    /**\n     * Callback activated when the component is being rendered\n     */\n    onActivated(() => {\n      isActive.value = true;\n      mqttUtil.resubscribeAll();\n    });\n\n    /**\n     * Callback activated when the component stops being rendered\n     */\n    onDeactivated(() => {\n      isActive.value = false;\n      mqttUtil.unsubscribeAll();\n    });\n\n    /**\n     * Creat an mqttUtils instance with arguments the client and a callback to update data\n     * @type {MqttUtils}\n     */\n    const mqttUtil = new mqttUtils(inject('mqttClient'), (topic, message) => {\n      mqttUtils.updateDataFromJSON(message, dataObject);\n    });\n    buildDataObjects();\n    addConnectedListeners();\n\n    /**\n     * Use the configuration fetched from the api to build the dataObject\n     */\n    function buildDataObjects() {\n      let apiClient = inject('apiClient');\n      apiClient.getConfig(\"CAN_out_config\").then(outConfig => {\n        let configUtilOut = new configUtils(outConfig);\n        dataObject.value = configUtilOut.getDataObject();\n        dataIsPresent.value = true;\n      });\n      apiClient.getConfig(\"CAN_in_config\").then(inConfig => {\n        inputOptions.value = inConfig;\n        inputOptionsIsPresent.value = true;\n      });\n    }\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners() {\n      if (mqttUtil.connected()) connected.value = true;\n      mqttUtil.on('connect', () => connected.value = true);\n      mqttUtil.on('disconnect', () => connected.value = false);\n      mqttUtil.on('reconnect', () => connected.value = false);\n    }\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings: Component/Group\n     */\n    const subscribeToFields = requiredValues => {\n      let fieldPathArray = [];\n      Object.entries(requiredValues).forEach(_ref => {\n        let [, fieldPath] = _ref;\n        fieldPathArray = fieldPath.split(\"/\");\n        mqttUtil.subscribeTo([`${fieldPathArray[0]}/${fieldPathArray[1]}`]);\n      });\n    };\n\n    /**\n     * Update from the dataObject, the data  of a module based on their required fields\n     * @param requiredFields array of required values containing path Strings: \"Component/Group/Field\"\n     * @param childData The data object of the module. Follows the convention:\n     *    {fieldAlias : groupObject} if the desired field is * (3rd value in the path) (refer to documentation for structure)\n     *    {fieldAlias : [value, unit]} otherwise\n     * Where fieldAlias is the name indicated in the childData and not in the main configuration file\n     */\n    const updateChildData = (requiredFields, childData) => {\n      let fieldPathArray = [];\n      Object.entries(requiredFields).forEach(_ref2 => {\n        let [fieldAlias, fieldPath] = _ref2;\n        try {\n          fieldPathArray = fieldPath.split(\"/\");\n          if (fieldPathArray[2] === \"*\") {\n            childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]];\n          } else {\n            childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]];\n          }\n        } catch (error) {\n          if (error instanceof TypeError) {\n            throw new Error(\"The path \" + fieldPath + \" doesn't exist in the configuration\");\n          } else {\n            throw error;\n          }\n        }\n      });\n    };\n\n    /**\n     * Return true if a child module can request an update, false otherwise\n     * We use dataIsPresent instead of the dataObject because it could be partially written (not null but not ready)\n     * @type {ComputedRef<boolean>}\n     */\n    const canUpdateChildData = computed(() => {\n      return dataIsPresent.value && isActive.value;\n    });\n    return {\n      dataObject,\n      connected,\n      subscribeToFields,\n      updateChildData,\n      canUpdateChildData\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","inject","onActivated","onDeactivated","onMounted","onUnmounted","provide","ref","watch","mqttUtils","configUtils","setup","connected","dataObject","inputOptions","dataIsPresent","inputOptionsIsPresent","isActive","value","mqttUtil","resubscribeAll","unsubscribeAll","topic","message","updateDataFromJSON","buildDataObjects","addConnectedListeners","apiClient","getConfig","then","outConfig","configUtilOut","getDataObject","inConfig","on","subscribeToFields","requiredValues","fieldPathArray","Object","entries","forEach","fieldPath","split","subscribeTo","updateChildData","requiredFields","childData","fieldAlias","error","TypeError","Error","canUpdateChildData"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :dataObject=\"dataObject\"\n          :subscribeToFields=\"subscribeToFields\"\n          :updateChildData=\"updateChildData\"\n          :canUpdateChildData=\"canUpdateChildData\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {computed, inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref, watch} from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\n\nexport default {\n  setup: function () {\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({})  //Object containing all our actual data, gets updated depending on subscribed topics\n    let inputOptions = ref(null);\n\n    let dataIsPresent = ref(false)\n    let inputOptionsIsPresent = ref(false)\n\n    let isActive = ref(false);  //indicate if the Home component is isActive\n\n    /**\n     * Callback activated when the component is being rendered\n     */\n    onActivated(()=> {\n      isActive.value = true\n      mqttUtil.resubscribeAll()\n    })\n\n    /**\n     * Callback activated when the component stops being rendered\n     */\n    onDeactivated(()=> {\n      isActive.value = false\n      mqttUtil.unsubscribeAll()\n    })\n\n    /**\n     * Creat an mqttUtils instance with arguments the client and a callback to update data\n     * @type {MqttUtils}\n     */\n    const mqttUtil = new mqttUtils(inject('mqttClient'), (topic, message) => {mqttUtils.updateDataFromJSON(message, dataObject)})\n\n    buildDataObjects()\n    addConnectedListeners()\n\n    /**\n     * Use the configuration fetched from the api to build the dataObject\n     */\n    function buildDataObjects(){\n      let apiClient = inject('apiClient');\n      apiClient.getConfig(\"CAN_out_config\").then((outConfig)=> {\n        let configUtilOut = new configUtils(outConfig)\n        dataObject.value = configUtilOut.getDataObject()\n        dataIsPresent.value = true\n      })\n\n      apiClient.getConfig(\"CAN_in_config\").then((inConfig)=> {\n        inputOptions.value = inConfig\n        inputOptionsIsPresent.value = true\n      })\n\n    }\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners(){\n      if(mqttUtil.connected()) connected.value = true\n      mqttUtil.on('connect', () => connected.value = true)\n      mqttUtil.on('disconnect', () => connected.value = false)\n      mqttUtil.on('reconnect', () => connected.value = false)\n    }\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings: Component/Group\n     */\n    const subscribeToFields = (requiredValues) => {\n      let fieldPathArray = []\n      Object.entries(requiredValues).forEach(([, fieldPath])=>{\n        fieldPathArray = fieldPath.split(\"/\")\n        mqttUtil.subscribeTo([`${fieldPathArray[0]}/${fieldPathArray[1]}`])\n      })\n    }\n\n    /**\n     * Update from the dataObject, the data  of a module based on their required fields\n     * @param requiredFields array of required values containing path Strings: \"Component/Group/Field\"\n     * @param childData The data object of the module. Follows the convention:\n     *    {fieldAlias : groupObject} if the desired field is * (3rd value in the path) (refer to documentation for structure)\n     *    {fieldAlias : [value, unit]} otherwise\n     * Where fieldAlias is the name indicated in the childData and not in the main configuration file\n     */\n    const updateChildData = (requiredFields, childData) => {\n      let fieldPathArray = []\n\n      Object.entries(requiredFields).forEach(([fieldAlias, fieldPath]) => {\n        try {\n          fieldPathArray = fieldPath.split(\"/\")\n          if(fieldPathArray[2] === \"*\") {childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]]}\n          else{childData.value[fieldAlias] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]]}\n        }\n        catch (error){\n          if (error instanceof TypeError) {\n            throw new Error(\"The path \" + fieldPath + \" doesn't exist in the configuration\")\n          } else {throw error;}\n        }\n      })\n    }\n\n    /**\n     * Return true if a child module can request an update, false otherwise\n     * We use dataIsPresent instead of the dataObject because it could be partially written (not null but not ready)\n     * @type {ComputedRef<boolean>}\n     */\n    const canUpdateChildData = computed(()=>{return (dataIsPresent.value && isActive.value)})\n\n    return {dataObject, connected, subscribeToFields, updateChildData, canUpdateChildData}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}