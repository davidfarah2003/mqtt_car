{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", null, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dataObject, (values, fieldName) => {\n    return _openBlock(), _createElementBlock(\"li\", null, [_createTextVNode(_toDisplayString($setup.connected) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(fieldName) + \":\", 1 /* TEXT */), _createElementVNode(\"div\", {\n      class: _normalizeClass(values[0] === 0 ? 'green' : 'red')\n    }, null, 2 /* CLASS */)]);\n  }), 256 /* UNKEYED_FRAGMENT */))])]);\n}","map":{"version":3,"mappings":";;uBACEA,oBAQO,eAPLC,oBAMK,gCALHD,oBAIKE,6BAJ6BC,iBAAU,GAAhCC,MAAM,EAAEC,SAAS;yBAA7BL,oBAIK,+CAHDG,gBAAS,IAAE,GACb,qCAAyB,8BAAlBE,SAAS,IAAE,GAAC,iBACnBJ,oBAA8C;MAAxCK,KAAK,kBAAEF,MAAM","names":["_createElementBlock","_createElementVNode","_Fragment","$setup","values","fieldName","class"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/Home/Status_panel.vue"],"sourcesContent":["<template>\n  <span>\n    <ul>\n      <li v-for=\"(values, fieldName) in dataObject\">\n        {{connected}}\n        <div>{{fieldName}}:</div>\n        <div :class=\"values[0]===0 ? 'green': 'red'\"/>\n      </li>\n    </ul>\n  </span>\n</template>\n\n<script>\nimport {computed, ref, watch} from \"vue\";\n\nexport default {\n  name: \"Status_panel\",\n  props: ['canUpdate', 'connected'],\n  emits: ['subscribeFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n      \"M1\": \"motor_controller_1/pwm/warnings\",\n      \"M2\": \"motor_controller_2/pwm/warnings\",\n      \"Main foil\": \"main_position_motor/txpdo_1/statusword\",\n      \"Back foil\": \"back_position_motor/txpdo_1/statusword\",\n      \"Lat foil\": \"lat_position_motor/txpdo_1/statusword\",\n      \"FCU\": \"fcu/status_01/general_status\",\n      \"IMU\": \"imu/status_01/general_status\",\n      \"Battery\": \"battery/pack_info/status\",\n      \"Height Sensor\": \"fcu/height_sensor/height_sensor_status\",\n    }\n\n    let connected = props.connected\n\n    emit(\"subscribeFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 1000)\n\n    let statuses = computed(()=>{\n      if (dataObject.value) {\n        return {}\n      }\n      return {}\n    })\n\n    return {dataObject, initialized, connected}\n  }\n}\n</script>\n\n<style scoped>\n.green {\n  background: green;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\n.red {\n  background: red;\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n}\n\nli {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 5px;\n}\n\nli div {\n  color: orange;\n}\n\nspan {\n  border: 1px solid red;\n}\n</style>"]},"metadata":{},"sourceType":"module"}