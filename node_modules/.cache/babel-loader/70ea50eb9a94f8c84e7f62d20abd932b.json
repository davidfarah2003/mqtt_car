{"ast":null,"code":"import mqtt from 'mqtt';\nexport default {\n  name: 'MqttClient',\n  data() {\n    return {\n      connection: {\n        host: 'mqtt://127.0.0.1:9001',\n        port: 9001,\n        endpoint: '/',\n        clean: true,\n        connectTimeout: 4000,\n        reconnectPeriod: 4000\n\n        //clientId: 'mqttjs_3be2c321',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n      },\n\n      subscription: {\n        topic: 'topic/test',\n        qos: 0\n      },\n      publish: {\n        topic: 'topic/test',\n        qos: 0,\n        payload: '{ \"msg\": \"Hello mqtt\" }'\n      },\n      receiveNews: '',\n      qosList: [{\n        label: 0,\n        value: 0\n      }, {\n        label: 1,\n        value: 1\n      }, {\n        label: 2,\n        value: 2\n      }],\n      client: {\n        connected: false\n      },\n      subscribeSuccess: false\n    };\n  },\n  methods: {\n    createConnection() {\n      const {\n        host,\n        port,\n        endpoint,\n        ...options\n      } = this.connection;\n      const connectUrl = `ws://${host}:${port}${endpoint}`;\n      try {\n        this.client = mqtt.connect(connectUrl, options);\n      } catch (error) {\n        console.log('mqtt.connect error', error);\n      }\n      this.client.on('connect', () => {\n        console.log('Connection succeeded!');\n      });\n      this.client.on('error', error => {\n        console.log('Connection failed', error);\n      });\n      this.client.on('message', (topic, message) => {\n        this.receiveNews = this.receiveNews.concat(message);\n        console.log(`Received message ${message} from topic ${topic}`);\n      });\n    },\n    doSubscribe() {\n      const {\n        topic,\n        qos\n      } = this.subscription;\n      this.client.subscribe(topic, {\n        qos\n      }, (error, res) => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n        this.subscribeSuccess = true;\n        console.log('Subscribe to topics res', res);\n      });\n    },\n    doUnSubscribe() {\n      const {\n        topic\n      } = this.subscription;\n      this.client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n        }\n      });\n    },\n    doPublish() {\n      const {\n        topic,\n        qos,\n        payload\n      } = this.publish;\n      this.client.publish(topic, payload, qos, error => {\n        if (error) {\n          console.log('Publish error', error);\n        }\n      });\n    },\n    destroyConnection() {\n      if (this.client.connected) {\n        try {\n          this.client.end();\n          this.client = {\n            connected: false\n          };\n          console.log('Successfully disconnected!');\n        } catch (error) {\n          console.log('Disconnect failed', error.toString());\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["mqtt","name","data","connection","host","port","endpoint","clean","connectTimeout","reconnectPeriod","subscription","topic","qos","publish","payload","receiveNews","qosList","label","value","client","connected","subscribeSuccess","methods","createConnection","options","connectUrl","connect","error","console","log","on","message","concat","doSubscribe","subscribe","res","doUnSubscribe","unsubscribe","doPublish","destroyConnection","end","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/MqttClient.vue"],"sourcesContent":["<template>\n\n</template>\n\n<script>\nimport mqtt from 'mqtt'\n\nexport default {\n  name: 'MqttClient',\n\n  data() {\n    return {\n      connection: {\n        host: 'mqtt://127.0.0.1:9001',\n        port: 9001,\n        endpoint: '/',\n        clean: true,\n        connectTimeout: 4000,\n        reconnectPeriod: 4000,\n\n        //clientId: 'mqttjs_3be2c321',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n      },\n      subscription: {\n        topic: 'topic/test',\n        qos: 0,\n      },\n      publish: {\n        topic: 'topic/test',\n        qos: 0,\n        payload: '{ \"msg\": \"Hello mqtt\" }',\n      },\n      receiveNews: '',\n      qosList: [\n        { label: 0, value: 0 },\n        { label: 1, value: 1 },\n        { label: 2, value: 2 },\n      ],\n      client: {\n        connected: false,\n      },\n      subscribeSuccess: false,\n    }\n  },\n  methods: {\n\n    createConnection() {\n      const { host, port, endpoint, ...options } = this.connection\n      const connectUrl = `ws://${host}:${port}${endpoint}`\n      try {\n        this.client = mqtt.connect(connectUrl, options)\n      } catch (error) {\n        console.log('mqtt.connect error', error)\n      }\n\n      this.client.on('connect', () => {\n        console.log('Connection succeeded!')\n      })\n\n      this.client.on('error', error => {\n        console.log('Connection failed', error)\n      })\n\n      this.client.on('message', (topic, message) => {\n        this.receiveNews = this.receiveNews.concat(message)\n        console.log(`Received message ${message} from topic ${topic}`)\n      })\n    },\n\n    doSubscribe() {\n      const { topic, qos } = this.subscription\n      this.client.subscribe(topic, { qos }, (error, res) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        this.subscribeSuccess = true\n        console.log('Subscribe to topics res', res)\n      })\n    },\n\n    doUnSubscribe() {\n      const { topic } = this.subscription\n      this.client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n        }\n      })\n    },\n\n    doPublish() {\n      const { topic, qos, payload } = this.publish\n      this.client.publish(topic, payload, qos, error => {\n        if (error) {\n          console.log('Publish error', error)\n        }\n      })\n    },\n\n    destroyConnection() {\n      if (this.client.connected) {\n        try {\n          this.client.end()\n          this.client = {\n            connected: false,\n          }\n          console.log('Successfully disconnected!')\n        } catch (error) {\n          console.log('Disconnect failed', error.toString())\n        }\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}