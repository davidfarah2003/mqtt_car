{"ast":null,"code":"import { ref } from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n  //const mqtt = require('precompiled-mqtt')\n  const mqtt = require('mqtt');\n  const clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\n  const host = 'ws://broker.emqx.io:8083/mqtt';\n  const options = {\n    keepalive: 60,\n    clientId: clientId,\n    protocolId: 'MQTT',\n    protocolVersion: 4,\n    clean: true,\n    reconnectPeriod: 1000,\n    connectTimeout: 30 * 1000,\n    will: {\n      topic: 'WillMsg',\n      payload: 'Connection Closed abnormally..!',\n      qos: 0,\n      retain: false\n    }\n  };\n  console.log('Connecting mqtt client');\n  const client = mqtt.connect(host, options);\n  client.on('error', err => {\n    console.log('Connection error: ', err);\n    client.end();\n  });\n  client.on('reconnect', () => {\n    console.log('Reconnecting...');\n  });\n};\nexport default getMqttClient;","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","clientId","Math","random","toString","substr","host","options","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","console","log","client","connect","on","err","end"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\"\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n    //const mqtt = require('precompiled-mqtt')\n    const mqtt = require('mqtt')\n\n    const clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n    const host = 'ws://broker.emqx.io:8083/mqtt'\n\n    const options = {\n        keepalive: 60,\n        clientId: clientId,\n        protocolId: 'MQTT',\n        protocolVersion: 4,\n        clean: true,\n        reconnectPeriod: 1000,\n        connectTimeout: 30 * 1000,\n        will: {\n            topic: 'WillMsg',\n            payload: 'Connection Closed abnormally..!',\n            qos: 0,\n            retain: false\n        },\n    }\n\n    console.log('Connecting mqtt client')\n    const client = mqtt.connect(host, options)\n\n    client.on('error', (err) => {\n        console.log('Connection error: ', err)\n        client.end()\n    })\n\n    client.on('reconnect', () => {\n        console.log('Reconnecting...')\n    })\n}\n\nexport default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;;AAEvB;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,MAAM;EACxB;EACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EAE5B,MAAMC,QAAQ,GAAG,SAAS,GAAGC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACpE,MAAMC,IAAI,GAAG,+BAA+B;EAE5C,MAAMC,OAAO,GAAG;IACZC,SAAS,EAAE,EAAE;IACbP,QAAQ,EAAEA,QAAQ;IAClBQ,UAAU,EAAE,MAAM;IAClBC,eAAe,EAAE,CAAC;IAClBC,KAAK,EAAE,IAAI;IACXC,eAAe,EAAE,IAAI;IACrBC,cAAc,EAAE,EAAE,GAAG,IAAI;IACzBC,IAAI,EAAE;MACFC,KAAK,EAAE,SAAS;MAChBC,OAAO,EAAE,iCAAiC;MAC1CC,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE;IACZ;EACJ,CAAC;EAEDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,MAAMC,MAAM,GAAGtB,IAAI,CAACuB,OAAO,CAAChB,IAAI,EAAEC,OAAO,CAAC;EAE1Cc,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;IACxBL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,GAAG,CAAC;IACtCH,MAAM,CAACI,GAAG,EAAE;EAChB,CAAC,CAAC;EAEFJ,MAAM,CAACE,EAAE,CAAC,WAAW,EAAE,MAAM;IACzBJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAClC,CAAC,CAAC;AACN,CAAC;AAED,eAAetB,aAAa"},"metadata":{},"sourceType":"module"}