{"ast":null,"code":"import { inject, onMounted, onUnmounted, ref } from \"vue\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient();\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient();\n    });\n\n    /*---------------------------------- MQTT Client related methods and variables -----------------------------------*/\n\n    const clientPromise = inject('mqttClient'); //injected mqttClient Object (provided in App.vue)\n    let mqttClient = null; //the mqttClient\n\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /**\n     * Set up the MQTT client for this component\n     */\n    function setupClient() {\n      clientPromise.then(client => {\n        mqttClient = client;\n\n        //Update connected status correctly\n        if (mqttClient.connected) connected.value = true;\n        mqttClient.on('connect', () => connected.value = true);\n        mqttClient.on('disconnect', () => connected.value = false);\n        mqttClient.on('reconnect', () => connected.value = false);\n\n        //Subscribe to needed topics\n        subscribeTopics();\n\n        //Listen for changes and update variables\n        updateVariables();\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n    /**\n     * Cleanup the mqtt client when unmounting\n     */\n    function cleanClient() {\n      unsubscribeTopics();\n    }\n\n    /**\n     * Subscribe to the topics indicated in the subscribedTopics array\n     */\n    function subscribeTopics() {\n      if (mqttClient) {\n        subscribedTopics.forEach(topic => {\n          mqttClient.subscribe(topic);\n          console.log(\"subscribed to \" + topic);\n        });\n      }\n    }\n\n    /**\n     * Unsubscribe from the topics indicated in the subscribedTopics array\n     */\n    function unsubscribeTopics() {\n      if (mqttClient) {\n        subscribedTopics.forEach(topic => {\n          mqttClient.unsubscribe(topic);\n          console.log(\"unsubscribed from \" + topic);\n        });\n      }\n    }\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables() {\n      mqttClient.on('message', (topic, message) => {\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n        test.value = message;\n      });\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {\n      test,\n      connected\n    };\n  }\n};","map":{"version":3,"mappings":"AASA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AAEvD,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IAEjB;;IAEA;;;IAGAJ,SAAS,CAAC,MAAM;MACdK,WAAW,EAAC;IACd,CAAC,CAAC;;IAEF;;;IAGAJ,WAAW,CAAC,MAAK;MACfK,WAAW,EAAC;IACd,CAAC,CAAC;;IAGF;;IAEA,MAAMC,aAAY,GAAIR,MAAM,CAAC,YAAY,GAAG;IAC5C,IAAIS,UAAS,GAAI,IAAI,EAAG;;IAExB,MAAMC,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;IACtD,IAAIC,SAAQ,GAAIR,GAAG,CAAC,KAAK,CAAC,EAAE;;IAG5B;;;IAGA,SAASG,WAAW,GAAG;MACrBE,aAAY,CACPI,IAAI,CAAEC,MAAM,IAAK;QAChBJ,UAAS,GAAII,MAAK;;QAElB;QACA,IAAGJ,UAAU,CAACE,SAAS,EAAEA,SAAS,CAACG,KAAI,GAAI,IAAG;QAC9CL,UAAU,CAACM,EAAE,CAAC,SAAS,EAAE,MAAMJ,SAAS,CAACG,KAAI,GAAI,IAAI;QACrDL,UAAU,CAACM,EAAE,CAAC,YAAY,EAAE,MAAMJ,SAAS,CAACG,KAAI,GAAI,KAAK;QACzDL,UAAU,CAACM,EAAE,CAAC,WAAW,EAAE,MAAMJ,SAAS,CAACG,KAAI,GAAI,KAAK;;QAExD;QACAE,eAAe,EAAC;;QAEhB;QACAC,eAAe,EAAC;MAElB,CAAC,EACAC,KAAK,CAAEC,GAAG,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG;MACjB,CAAC,CAAC;IACR;;IAEA;;;IAGA,SAASZ,WAAW,GAAG;MACrBe,iBAAiB,EAAC;IACpB;;IAEA;;;IAGA,SAASN,eAAe,GAAE;MACxB,IAAIP,UAAU,EAAE;QACdC,gBAAgB,CAACa,OAAO,CAAGC,KAAK,IAAI;UAClCf,UAAU,CAACgB,SAAS,CAACD,KAAK;UAC1BJ,OAAO,CAACC,GAAG,CAAC,gBAAe,GAAIG,KAAK;QACtC,CAAC;MACH;IACF;;IAEA;;;IAGA,SAASF,iBAAiB,GAAE;MAC1B,IAAGb,UAAU,EAAC;QACZC,gBAAgB,CAACa,OAAO,CAAGC,KAAK,IAAI;UAClCf,UAAU,CAACiB,WAAW,CAACF,KAAK;UAC5BJ,OAAO,CAACC,GAAG,CAAC,oBAAmB,GAAIG,KAAK;QAC1C,CAAC;MACH;IACF;;IAGA;IACA,IAAIG,IAAG,GAAIxB,GAAG,CAACyB,GAAG,CAAC;;IAEnB;;;IAGA,SAASX,eAAe,GAAE;MACxBR,UAAU,CAACM,EAAE,CAAC,SAAS,EAAE,CAACS,KAAK,EAAEK,OAAO,KAAG;QACzCT,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIG,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIK,OAAO,CAACC,QAAQ,EAAE;QACpEH,IAAI,CAACb,KAAI,GAAIe,OAAM;MACrB,CAAC;IACH;;IAEA;IACA,OAAO;MAACF,IAAI;MAAEhB;IAAS;EACzB;AACF","names":["inject","onMounted","onUnmounted","ref","name","setup","setupClient","cleanClient","clientPromise","mqttClient","subscribedTopics","connected","then","client","value","on","subscribeTopics","updateVariables","catch","err","console","log","unsubscribeTopics","forEach","topic","subscribe","unsubscribe","test","NaN","message","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connected\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n\n</template>\n\n<script>\n\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient()\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient()\n    });\n\n\n    /*---------------------------------- MQTT Client related methods and variables -----------------------------------*/\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Object (provided in App.vue)\n    let mqttClient = null;  //the mqttClient\n\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n\n    /**\n     * Set up the MQTT client for this component\n     */\n    function setupClient() {\n      clientPromise\n          .then((client) => {\n            mqttClient = client\n\n            //Update connected status correctly\n            if(mqttClient.connected) connected.value = true\n            mqttClient.on('connect', () => connected.value = true)\n            mqttClient.on('disconnect', () => connected.value = false)\n            mqttClient.on('reconnect', () => connected.value = false)\n\n            //Subscribe to needed topics\n            subscribeTopics()\n\n            //Listen for changes and update variables\n            updateVariables()\n\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    }\n\n    /**\n     * Cleanup the mqtt client when unmounting\n     */\n    function cleanClient() {\n      unsubscribeTopics()\n    }\n\n    /**\n     * Subscribe to the topics indicated in the subscribedTopics array\n     */\n    function subscribeTopics(){\n      if (mqttClient) {\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.subscribe(topic)\n          console.log(\"subscribed to \" + topic)\n        })\n      }\n    }\n\n    /**\n     * Unsubscribe from the topics indicated in the subscribedTopics array\n     */\n    function unsubscribeTopics(){\n      if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.unsubscribe(topic)\n          console.log(\"unsubscribed from \" + topic)\n        })\n      }\n    }\n\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(){\n      mqttClient.on('message', (topic, message)=>{\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n        test.value = message\n      })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}