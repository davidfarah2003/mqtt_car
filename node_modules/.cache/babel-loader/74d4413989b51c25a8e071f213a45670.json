{"ast":null,"code":"'use strict';\n\nconst mqtt = require('mqtt');\nclass AsyncClient {\n  constructor(client) {\n    this._client = client;\n  }\n  set handleMessage(newHandler) {\n    this._client.handleMessage = newHandler;\n  }\n  get handleMessage() {\n    return this._client.handleMessage;\n  }\n  get connected() {\n    return this._client.connected;\n  }\n  get reconnecting() {\n    return this._client.reconnecting;\n  }\n  publish(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.publish(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n  subscribe(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n  unsubscribe(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.unsubscribe(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n  end(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.end(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n  reconnect(...args) {\n    return this._client.reconnect(...args);\n  }\n  addListener(...args) {\n    return this._client.addListener(...args);\n  }\n  emit(...args) {\n    return this._client.emit(...args);\n  }\n  eventNames(...args) {\n    return this._client.eventNames(...args);\n  }\n  getLastMessageId(...args) {\n    return this._client.getLastMessageId(...args);\n  }\n  getMaxListeners(...args) {\n    return this._client.getMaxListeners(...args);\n  }\n  listenerCount(...args) {\n    return this._client.listenerCount(...args);\n  }\n  listeners(...args) {\n    return this._client.listeners(...args);\n  }\n  off(...args) {\n    return this._client.off(...args);\n  }\n  on(...args) {\n    return this._client.on(...args);\n  }\n  once(...args) {\n    return this._client.once(...args);\n  }\n  prependListener(...args) {\n    return this._client.prependListener(...args);\n  }\n  prependOnceListener(...args) {\n    return this._client.prependOnceListener(...args);\n  }\n  rawListeners(...args) {\n    return this._client.rawListeners(...args);\n  }\n  removeAllListeners(...args) {\n    return this._client.removeAllListeners(...args);\n  }\n  removeListener(...args) {\n    return this._client.removeListener(...args);\n  }\n  removeOutgoingMessage(...args) {\n    return this._client.removeOutgoingMessage(...args);\n  }\n  setMaxListeners(...args) {\n    return this._client.setMaxListeners(...args);\n  }\n}\nmodule.exports = {\n  connect(brokerURL, opts) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n    return asyncClient;\n  },\n  connectAsync(brokerURL, opts, allowRetries = true) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n    return new Promise((resolve, reject) => {\n      // Listeners added to client to trigger promise resolution\n      const promiseResolutionListeners = {\n        connect: connack => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient); // Resolve on connect\n        },\n\n        end: () => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient); // Resolve on end\n        },\n\n        error: err => {\n          removePromiseResolutionListeners();\n          client.end();\n          reject(err); // Reject on error\n        }\n      };\n\n      // If retries are not allowed, reject on close\n      if (false === allowRetries) {\n        promiseResolutionListeners.close = () => {\n          promiseResolutionListeners.error('Couldn\\'t connect to server');\n        };\n      }\n\n      // Remove listeners added to client by this promise\n      function removePromiseResolutionListeners() {\n        Object.keys(promiseResolutionListeners).forEach(eventName => {\n          client.removeListener(eventName, promiseResolutionListeners[eventName]);\n        });\n      }\n      ;\n\n      // Add listeners to client\n      Object.keys(promiseResolutionListeners).forEach(eventName => {\n        client.on(eventName, promiseResolutionListeners[eventName]);\n      });\n    });\n  },\n  AsyncClient\n};","map":{"version":3,"names":["mqtt","require","AsyncClient","constructor","client","_client","handleMessage","newHandler","connected","reconnecting","publish","args","Promise","resolve","reject","err","result","subscribe","unsubscribe","end","reconnect","addListener","emit","eventNames","getLastMessageId","getMaxListeners","listenerCount","listeners","off","on","once","prependListener","prependOnceListener","rawListeners","removeAllListeners","removeListener","removeOutgoingMessage","setMaxListeners","module","exports","connect","brokerURL","opts","asyncClient","connectAsync","allowRetries","promiseResolutionListeners","connack","removePromiseResolutionListeners","error","close","Object","keys","forEach","eventName"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/node_modules/async-mqtt/index.js"],"sourcesContent":["'use strict'\n\nconst mqtt = require('mqtt');\n\nclass AsyncClient {\n  constructor (client) {\n    this._client = client;\n  }\n\n  set handleMessage (newHandler) {\n    this._client.handleMessage = newHandler;\n  }\n\n  get handleMessage () {\n    return this._client.handleMessage;\n  }\n\n  get connected () {\n    return this._client.connected;\n  }\n\n  get reconnecting () {\n    return this._client.reconnecting;\n  }\n\n  publish (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.publish(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  subscribe (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  unsubscribe (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.unsubscribe(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  end (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.end(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  reconnect (...args) {\n    return this._client.reconnect(...args);\n  }\n\n  addListener (...args) {\n    return this._client.addListener(...args);\n  }\n\n  emit (...args) {\n    return this._client.emit(...args);\n  }\n\n  eventNames (...args) {\n    return this._client.eventNames(...args);\n  }\n\n  getLastMessageId (...args) {\n    return this._client.getLastMessageId(...args);\n  }\n\n  getMaxListeners (...args) {\n    return this._client.getMaxListeners(...args);\n  }\n\n  listenerCount (...args) {\n    return this._client.listenerCount(...args);\n  }\n\n  listeners (...args) {\n    return this._client.listeners(...args);\n  }\n\n  off (...args) {\n    return this._client.off(...args);\n  }\n\n  on (...args) {\n    return this._client.on(...args);\n  }\n\n  once (...args) {\n    return this._client.once(...args);\n  }\n\n  prependListener (...args) {\n    return this._client.prependListener(...args);\n  }\n\n  prependOnceListener (...args) {\n    return this._client.prependOnceListener(...args);\n  }\n\n  rawListeners (...args) {\n    return this._client.rawListeners(...args);\n  }\n\n  removeAllListeners (...args) {\n    return this._client.removeAllListeners(...args);\n  }\n\n  removeListener (...args) {\n    return this._client.removeListener(...args);\n  }\n\n  removeOutgoingMessage (...args) {\n    return this._client.removeOutgoingMessage(...args);\n  }\n\n  setMaxListeners (...args) {\n    return this._client.setMaxListeners(...args);\n  }\n\n}\n\n\nmodule.exports = {\n  connect (brokerURL, opts) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n  \n    return asyncClient;\n  },\n  connectAsync (brokerURL, opts, allowRetries=true) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n\n    return new Promise((resolve, reject) => {\n      // Listeners added to client to trigger promise resolution\n      const promiseResolutionListeners = {\n        connect: (connack) => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient);   // Resolve on connect\n        },\n        end: () => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient);   // Resolve on end\n        },\n        error: (err) => {\n          removePromiseResolutionListeners();\n          client.end();\n          reject(err);            // Reject on error\n        }\n      };\n\n      // If retries are not allowed, reject on close\n      if (false === allowRetries) {\n        promiseResolutionListeners.close = () => {\n          promiseResolutionListeners.error('Couldn\\'t connect to server');\n        }\n      }\n\n      // Remove listeners added to client by this promise\n      function removePromiseResolutionListeners () {\n        Object.keys(promiseResolutionListeners).forEach((eventName) => {\n          client.removeListener(eventName, promiseResolutionListeners[eventName]);\n        });\n      };\n\n      // Add listeners to client\n      Object.keys(promiseResolutionListeners).forEach((eventName) => {\n        client.on(eventName, promiseResolutionListeners[eventName]);\n      });\n    });\n  },\n  AsyncClient\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}