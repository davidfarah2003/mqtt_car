{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\" Home \"), _createElementVNode(\"h1\", null, _toDisplayString(_ctx.test), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;sFAEE,uBAAiB,6BAAXA,SAAI","names":["_ctx"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1>{{test}}</h1>\n</template>\n\n<script>\n\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n    const subscribedTopics = ['hello', 'world', 'bitch'];\n    let test = ref(NaN);\n    let mqttClient = ref(null);\n\n    onMounted(() => {\n      inject('mqttClient')\n          .then((client) => {\n            mqttClient = client\n            setupClient()\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient()\n    });\n\n    function setupClient() {\n      if (mqttClient) {\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.subscribe(topic)\n          console.log(\"subscribed to \" + topic)\n        })\n\n        updateVariables()\n      }\n    }\n\n    function cleanClient() {\n      if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.unsubscribe(topic)\n          console.log(\"unsubscribed from \" + topic)\n        })\n      }\n    }\n\n    function updateVariables(){\n      mqttClient.on('message', (topic, message)=>{\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n        test.value = message.toString()\n      })\n    }\n\n    return {test}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}