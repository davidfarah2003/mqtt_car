{"ast":null,"code":"function retrieveDataFromJSON(receivedData, sensorData) {\n  const parsed = JSON.parse(receivedData);\n  try {\n    parsed.forEach(message => {\n      message[\"sensors\"].forEach(sensor => {\n        if (sensor[\"sensor_name\"] === undefined) {\n          throw new Error(\"Received JSON is not well formatted\");\n        }\n        sensorData.value[message[\"message_name\"] + \"/\" + sensor[\"sensor_name\"]] = sensor[\"value\"];\n      });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport default retrieveDataFromJSON;","map":{"version":3,"names":["retrieveDataFromJSON","receivedData","sensorData","parsed","JSON","parse","forEach","message","sensor","undefined","Error","value","err","console","log"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/responseHandler.js"],"sourcesContent":["function retrieveDataFromJSON(receivedData, sensorData) {\n    const parsed = JSON.parse(receivedData)\n    try {\n        parsed.forEach((message)=>{\n            message[\"sensors\"].forEach((sensor) => {\n                if(sensor[\"sensor_name\"] === undefined) {throw new Error(\"Received JSON is not well formatted\")}\n                sensorData.value[message[\"message_name\"] + \"/\" + sensor[\"sensor_name\"]] = sensor[\"value\"]\n            })\n        })\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nexport default retrieveDataFromJSON"],"mappings":"AAAA,SAASA,oBAAoB,CAACC,YAAY,EAAEC,UAAU,EAAE;EACpD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;EACvC,IAAI;IACAE,MAAM,CAACG,OAAO,CAAEC,OAAO,IAAG;MACtBA,OAAO,CAAC,SAAS,CAAC,CAACD,OAAO,CAAEE,MAAM,IAAK;QACnC,IAAGA,MAAM,CAAC,aAAa,CAAC,KAAKC,SAAS,EAAE;UAAC,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QAAA;QAC/FR,UAAU,CAACS,KAAK,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAG,GAAG,GAAGC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAGA,MAAM,CAAC,OAAO,CAAC;MAC7F,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CACD,OAAOI,GAAG,EAAE;IACRC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB;AACJ;AAEA,eAAeZ,oBAAoB"},"metadata":{},"sourceType":"module"}