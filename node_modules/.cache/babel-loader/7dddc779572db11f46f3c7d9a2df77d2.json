{"ast":null,"code":"import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\", {\n    connected: _ctx.connected,\n    dataObject: _ctx.dataObject,\n    subscribedTopics: $props.subscribedTopics,\n    subscribeFromFields: _ctx.subscribeFromFields,\n    updateChildData: _ctx.updateChildData,\n    canUpdateChildData: _ctx.canUpdateChildData\n  })]);\n}","map":{"version":3,"mappings":";;EACWA,KAAK,EAAC;AAAU;;uBAAzBC,oBAQU,WARVC,UAQU,GAPRC,YAMEC;IANKC,SAAS,EAAED,cAAS;IACpBE,UAAU,EAAEF,eAAU;IACtBG,gBAAgB,EAAEC,uBAAgB;IAClCC,mBAAmB,EAAEL,wBAAmB;IACxCM,eAAe,EAAEN,oBAAe;IAChCO,kBAAkB,EAAEP","names":["class","_createElementBlock","_hoisted_1","_renderSlot","_ctx","connected","dataObject","subscribedTopics","$props","subscribeFromFields","updateChildData","canUpdateChildData"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :dataObject=\"dataObject\"\n          :subscribedTopics=\"subscribedTopics\"\n          :subscribeFromFields=\"subscribeFromFields\"\n          :updateChildData=\"updateChildData\"\n          :canUpdateChildData=\"canUpdateChildData\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {computed, inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref, watch} from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\n\nexport default {\n  props: ['subscribedTopics', 'mqttCallback'],\n  emits: ['dataObject'],\n\n  setup: function (props, { emit }) {\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({})  //Object containing all our actual data, gets updated depending on subscribed topics\n    let subscribedTopics = ref([]); //Array containing the subscribed topics for this component\n    let dataIsPresent = ref(false)\n    let isActive = ref(false);  //indicate if the Home component is isActive\n\n\n    //Use the configuration fetched from the api to build the dataObject\n    inject('apiClient').getConfig(\"CAN_out_config\").then((outConfig)=> {\n      let configUtil = new configUtils(outConfig)\n      dataObject.value = configUtil.getDataObject()\n      dataIsPresent.value = true\n    })\n\n    //Use the mqtt client to create an mqttUtil instance, and update our data automatically with a callback\n    const MqttCallback = (topic, message) => {\n      mqttUtils.updateDataFromJSON(message, dataObject)\n    }\n    let mqttUtil = new mqttUtils(inject('mqttClient'), MqttCallback)\n\n    watch(subscribedTopics, ()=>{\n      if (isActive.value) {\n        console.log(\"subscribed to \" + subscribedTopics)\n        mqttUtil.subscribeTo(props.subscribedTopics)\n      }\n    })\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings\n     */\n    const subscribeFromFields = (requiredValues) => {\n      console.log(\"dingdong\"+requiredValues)\n      let fieldPathArray = []\n      Object.entries(requiredValues).forEach(([, fieldPath])=>{\n        fieldPathArray = fieldPath.split(\"/\")\n        subscribedTopics.value.push(`${fieldPathArray[0]}/${fieldPathArray[1]}`)\n      })\n    }\n\n    /**\n     * Update the data of a module based on their required values\n     * @param requiredValues array of required values containing path Strings\n     * @param childData The data object of the module. follows the same convention\n     */\n    const updateChildData = (requiredValues, childData) => {\n      let fieldPathArray = []\n\n      Object.entries(requiredValues).forEach(([fieldName, fieldPath]) => {\n        fieldPathArray = fieldPath.split(\"/\")\n        childData.value[fieldName] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]]\n      })\n    }\n\n    /**\n     * Return true if a child module can request an update, false otherwise\n     * We use dataIsPresent instead of the dataObject because it could be partially written (not null but not ready)\n     * @type {ComputedRef<boolean>}\n     */\n    const canUpdateChildData = computed(()=>{\n      return (dataIsPresent.value && isActive.value)\n    })\n\n    onActivated(()=> {\n      isActive.value = true\n      mqttUtil.subscribeTo(props.subscribedTopics)\n    })\n\n    onDeactivated(()=> {\n      isActive.value = false\n      mqttUtil.resetClient()\n    })\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners(){\n      if(mqttUtil.connected()) connected.value = true\n      mqttUtil.on('connect', () => connected.value = true)\n      mqttUtil.on('disconnect', () => connected.value = false)\n      mqttUtil.on('reconnect', () => connected.value = false)\n    }\n    addConnectedListeners()\n\n\n    return {dataObject, connected, subscribeFromFields, updateChildData, canUpdateChildData, subscribedTopics}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}