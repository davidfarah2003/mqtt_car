{"ast":null,"code":"import { inject, onMounted, onUnmounted, ref } from \"vue\";\nimport { cleanClient, setupClient } from \"@/composables/mqttMethods\";\nexport default {\n  name: \"AllData\",\n  setup: function () {\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      mounted = true;\n      setupClient(clientPromise, subscribedTopics, mqttCallBack);\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      mounted = false;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    const mqttCallBack = mqttClient => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n    };\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let mounted = false; //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (mounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n        }\n      });\n    }\n    return test;\n  }\n};","map":{"version":3,"mappings":"AAMA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AACvD,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,IAAI,EAAE,SAAS;EAEfC,KAAK,EAAE,YAAY;IACjB,MAAMC,aAAY,GAAIR,MAAM,CAAC,YAAY,GAAG;IAC5C,MAAMS,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;IACtD,IAAIC,SAAQ,GAAIP,GAAG,CAAC,KAAK,CAAC,EAAE;;IAE5B;;;IAGAF,SAAS,CAAC,MAAM;MACdU,OAAM,GAAI,IAAG;MACbN,WAAW,CAACG,aAAa,EAAEC,gBAAgB,EAAEG,YAAY;IAC3D,CAAC,CAAC;;IAEF;;;IAGAV,WAAW,CAAC,MAAK;MACfS,OAAM,GAAI,KAAI;MACdP,WAAW,CAACI,aAAa,EAAEC,gBAAgB;IAC7C,CAAC,CAAC;IAEF,MAAMG,YAAW,GAAKC,UAAU,IAAK;MACnC;MACAC,eAAe,CAACD,UAAU;IAC5B;;IAGA;IACA,IAAIE,IAAG,GAAIZ,GAAG,CAACa,GAAG,CAAC;IACnB,IAAIL,OAAM,GAAI,KAAK,EAAG;;IAEtB;;;IAGA,SAASG,eAAe,CAACD,UAAU,EAAC;MAClC;MACA,IAAGA,UAAU,CAACH,SAAS,EAAEA,SAAS,CAACO,KAAI,GAAI,IAAG;MAC9CJ,UAAU,CAACK,EAAE,CAAC,SAAS,EAAE,MAAMR,SAAS,CAACO,KAAI,GAAI,IAAI;MACrDJ,UAAU,CAACK,EAAE,CAAC,YAAY,EAAE,MAAMR,SAAS,CAACO,KAAI,GAAI,KAAK;MACzDJ,UAAU,CAACK,EAAE,CAAC,WAAW,EAAE,MAAMR,SAAS,CAACO,KAAI,GAAI,KAAK;MAExDJ,UAAU,CAACK,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGT,OAAO,EAAC;UACTU,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIH,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACG,QAAQ,EAAE;UACpER,IAAI,CAACE,KAAI,GAAIG,OAAM;QACrB;MACF,CAAC;IACH;IAEA,OAAOL,IAAI;EAEb;AACF","names":["inject","onMounted","onUnmounted","ref","cleanClient","setupClient","name","setup","clientPromise","subscribedTopics","connected","mounted","mqttCallBack","mqttClient","updateVariables","test","NaN","value","on","topic","message","console","log","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/AllData.vue"],"sourcesContent":["<template>\n  All data\n  Data: {{test}}\n</template>\n\n<script>\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\nimport {cleanClient, setupClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"AllData\",\n\n  setup: function () {\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      mounted = true\n      setupClient(clientPromise, subscribedTopics, mqttCallBack)\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      mounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    const mqttCallBack = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n    }\n\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n    let mounted = false;  //indicate if the Home component is mounted\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n      //Update connected status correctly\n      if(mqttClient.connected) connected.value = true\n      mqttClient.on('connect', () => connected.value = true)\n      mqttClient.on('disconnect', () => connected.value = false)\n      mqttClient.on('reconnect', () => connected.value = false)\n\n      mqttClient.on('message', (topic, message)=>{\n        if(mounted){\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n          test.value = message\n        }\n      })\n    }\n\n    return test;\n\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}