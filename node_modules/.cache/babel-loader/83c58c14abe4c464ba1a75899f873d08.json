{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5242c480\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"plugin\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", _hoisted_1);\n}","map":{"version":3,"mappings":";;;EACQA,KAAK,EAAC;AAAQ;;uBAApBC,oBAEO,QAFPC,UAEO","names":["class","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/Home/Ctrl_panel.vue"],"sourcesContent":["<template>\n  <span class=\"plugin\">\n\n  </span>\n</template>\n\n<script>\nimport {ref} from \"vue\";\n\nexport default {\n  name: \"Ctrl_panel\",\n  props: ['canUpdate', 'mqttUtil'],\n  emits: ['subscribeToFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n    }\n\n    emit(\"subscribeToFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 1000)\n\n    return {dataObject, initialized}\n  }\n}\n</script>\n\n<style scoped>\n.plugin {\n  color: var(--title_color);\n}\n</style>"]},"metadata":{},"sourceType":"module"}