{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\" Home \"), _ctx.connected ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_1, \"Connected\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"h3\", null, \"Data: \" + _toDisplayString(_ctx.test), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;sFAEE,GAAUA,cAAS,kBAAnBC,oBAAmC,kBAAd,WAAS,wCAC9BC,oBAAuB,YAAnB,QAAM,oBAAEF,SAAI","names":["_ctx","_createElementBlock","_createElementVNode"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connected\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n\n</template>\n\n<script>\n\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    /**\n     * Execute when the component is mounted\n     */\n    onMounted(() => {\n      setupClient()\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient()\n    });\n\n\n    /*---------------------------------- MQTT Client related methods and variables -----------------------------------*/\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Object (provided in App.vue)\n    let mqttClient = null;  //the mqttClient\n\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n\n\n    /**\n     * Set up the MQTT client for this component\n     */\n    function setupClient() {\n      clientPromise\n          .then((client) => {\n            mqttClient = client\n\n            //Update connected status correctly\n            if(mqttClient.connected) connected.value = true\n            mqttClient.on('connect', () => connected.value = true)\n            mqttClient.on('disconnect', () => connected.value = false)\n            mqttClient.on('reconnect', () => connected.value = false)\n\n            //Subscribe to needed topics\n            subscribeTopics()\n\n            //Listen for changes and update variables\n            updateVariables()\n\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    }\n\n    /**\n     * Cleanup the mqtt client when unmounting\n     */\n    function cleanClient() {\n      unsubscribeTopics()\n    }\n\n    /**\n     * Subscribe to the topics indicated in the subscribedTopics array\n     */\n    function subscribeTopics(){\n      if (mqttClient) {\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.subscribe(topic)\n          console.log(\"subscribed to \" + topic)\n        })\n      }\n    }\n\n    /**\n     * Unsubscribe from the topics indicated in the subscribedTopics array\n     */\n    function unsubscribeTopics(){\n      if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.unsubscribe(topic)\n          console.log(\"unsubscribed from \" + topic)\n        })\n      }\n    }\n\n\n    /*--------------------------------- Incoming Values related methods and variables --------------------------------*/\n    let test = ref(NaN);\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(){\n      mqttClient.on('message', (topic, message)=>{\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n        test.value = message\n      })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}