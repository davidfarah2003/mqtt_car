{"ast":null,"code":"import { inject, onMounted, onUnmounted, ref } from \"vue\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    let mqtt = null;\n    onMounted(() => {\n      const mqttClient = inject('mqttClient');\n      mqttClient.then(client => {\n        client.on('connect', () => {\n          //mqtt = client\n          test(client);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    /**\n     * Execute when unmounted and mqtt variable is assigned and the mqtt.value is undefined (ref\n     */\n    onUnmounted(() => {\n      if (mqtt) {\n        console.log(\"unmounted\");\n      }\n    });\n    const test = client => {\n      client.subscribe('test');\n      client.publish('test', 'lol');\n    };\n  }\n};","map":{"version":3,"mappings":"AAMA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AAEvD,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IACjB,IAAIC,IAAG,GAAI,IAAG;IAEdL,SAAS,CAAC,MAAM;MACd,MAAMM,UAAS,GAAIP,MAAM,CAAC,YAAY;MAEtCO,UAAS,CACJC,IAAI,CAAEC,MAAM,IAAK;QAChBA,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;UACzB;UACAC,IAAI,CAACF,MAAM;QACb,CAAC;MAEH,CAAC,EACAG,KAAK,CAAEC,GAAG,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG;MACjB,CAAC,CAAC;IACR,CAAC;;IAED;;;IAGAX,WAAW,CAAC,MAAK;MACf,IAAGI,IAAI,EAAC;QACNQ,OAAO,CAACC,GAAG,CAAC,WAAW;MACzB;IACF,CAAC;IAED,MAAMJ,IAAG,GAAKF,MAAM,IAAK;MACvBA,MAAM,CAACO,SAAS,CAAC,MAAM;MACvBP,MAAM,CAACQ,OAAO,CAAC,MAAM,EAAE,KAAK;IAC9B;EAEF;AACF","names":["inject","onMounted","onUnmounted","ref","name","setup","mqtt","mqttClient","then","client","on","test","catch","err","console","log","subscribe","publish"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n</template>\n\n<script>\n\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n    let mqtt = null\n\n    onMounted(() => {\n      const mqttClient = inject('mqttClient')\n\n      mqttClient\n          .then((client) => {\n            client.on('connect', () => {\n              //mqtt = client\n              test(client)\n            })\n\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    })\n\n    /**\n     * Execute when unmounted and mqtt variable is assigned and the mqtt.value is undefined (ref\n     */\n    onUnmounted(()=> {\n      if(mqtt){\n        console.log(\"unmounted\")\n      }\n    })\n\n    const test = (client) => {\n      client.subscribe('test')\n      client.publish('test', 'lol')\n    }\n\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}