{"ast":null,"code":"import { inject, onActivated, onDeactivated, onMounted, onUnmounted, ref } from \"vue\";\nimport { cleanClient, setupClient } from \"@/composables/mqttMethods\";\nexport default {\n  name: \"AllData\",\n  setup: function () {\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false; //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    onActivated(() => {\n      if (!hasBeenSetup) {\n        mounted = true;\n        setupClient(clientPromise, subscribedTopics, mqttSetup);\n      } else {\n        mounted = true;\n        setupClient(clientPromise, subscribedTopics, () => {});\n      }\n    });\n    onDeactivated(() => {\n      mounted = false;\n      cleanClient(clientPromise, subscribedTopics);\n    });\n    const mqttSetup = mqttClient => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n      hasBeenSetup = true;\n    };\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      console.log(\"test\");\n\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (mounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n        }\n      });\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {\n      test,\n      connected\n    };\n  }\n};","map":{"version":3,"mappings":"AAOA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AACnF,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,IAAI,EAAE,SAAS;EAEfC,KAAK,EAAE,YAAY;IAEjB;IACA,MAAMC,aAAY,GAAIV,MAAM,CAAC,YAAY,GAAG;IAC5C,MAAMW,gBAAe,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;IACtD,IAAIC,SAAQ,GAAIP,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,IAAIQ,OAAM,GAAI,KAAK,EAAG;IACtB,IAAIC,YAAW,GAAI,KAAK;IAExB,IAAIC,IAAG,GAAIV,GAAG,CAACW,GAAG,CAAC;;IAEnB;;;IAGAZ,WAAW,CAAC,MAAK;MACfE,WAAW,CAACI,aAAa,EAAEC,gBAAgB;IAC7C,CAAC,CAAC;IAEFV,WAAW,CAAC,MAAK;MACf,IAAI,CAACa,YAAY,EAAE;QACjBD,OAAM,GAAI,IAAG;QACbN,WAAW,CAACG,aAAa,EAAEC,gBAAgB,EAAEM,SAAS;MACxD,OAAO;QACLJ,OAAM,GAAI,IAAG;QACbN,WAAW,CAACG,aAAa,EAAEC,gBAAgB,EAAE,MAAM,CAAC,CAAC;MACvD;IACF,CAAC;IAEDT,aAAa,CAAC,MAAK;MACjBW,OAAM,GAAI,KAAI;MACdP,WAAW,CAACI,aAAa,EAAEC,gBAAgB;IAC7C,CAAC;IAED,MAAMM,SAAQ,GAAKC,UAAU,IAAK;MAChC;MACAC,eAAe,CAACD,UAAU;MAC1BJ,YAAW,GAAI,IAAG;IACpB;;IAEA;;;IAGA,SAASK,eAAe,CAACD,UAAU,EAAC;MAClCE,OAAO,CAACC,GAAG,CAAC,MAAM;;MAElB;MACA,IAAGH,UAAU,CAACN,SAAS,EAAEA,SAAS,CAACU,KAAI,GAAI,IAAG;MAC9CJ,UAAU,CAACK,EAAE,CAAC,SAAS,EAAE,MAAMX,SAAS,CAACU,KAAI,GAAI,IAAI;MACrDJ,UAAU,CAACK,EAAE,CAAC,YAAY,EAAE,MAAMX,SAAS,CAACU,KAAI,GAAI,KAAK;MACzDJ,UAAU,CAACK,EAAE,CAAC,WAAW,EAAE,MAAMX,SAAS,CAACU,KAAI,GAAI,KAAK;MAExDJ,UAAU,CAACK,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGZ,OAAO,EAAC;UACTO,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIG,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACC,QAAQ,EAAE;UACpEX,IAAI,CAACO,KAAI,GAAIG,OAAM;QACrB;MACF,CAAC;IACH;;IAEA;IACA,OAAO;MAACV,IAAI;MAAEH;IAAS;EACzB;AAEF","names":["inject","onActivated","onDeactivated","onMounted","onUnmounted","ref","cleanClient","setupClient","name","setup","clientPromise","subscribedTopics","connected","mounted","hasBeenSetup","test","NaN","mqttSetup","mqttClient","updateVariables","console","log","value","on","topic","message","toString"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/AllData.vue"],"sourcesContent":["<template>\n  All data\n  <h1 v-if=\"connected\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n</template>\n\n<script>\nimport {inject, onActivated, onDeactivated, onMounted, onUnmounted, ref} from \"vue\";\nimport {cleanClient, setupClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"AllData\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false;  //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    onActivated(()=> {\n      if (!hasBeenSetup) {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, mqttSetup)\n      } else {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, () => {})\n      }\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    const mqttSetup = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n      hasBeenSetup = true\n    }\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n      console.log(\"test\")\n\n      //Update connected status correctly\n      if(mqttClient.connected) connected.value = true\n      mqttClient.on('connect', () => connected.value = true)\n      mqttClient.on('disconnect', () => connected.value = false)\n      mqttClient.on('reconnect', () => connected.value = false)\n\n      mqttClient.on('message', (topic, message)=>{\n        if(mounted){\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n          test.value = message\n        }\n      })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected}\n  }\n\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}