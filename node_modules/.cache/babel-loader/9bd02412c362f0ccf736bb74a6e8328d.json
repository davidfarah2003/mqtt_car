{"ast":null,"code":"import { inject, onMounted, onUnmounted, ref } from \"vue\";\nexport default {\n  name: \"Home\",\n  setup: function () {\n    let mqtt = null;\n    const mqttClient = inject('mqttClient');\n    onMounted(() => {\n      console.log(\"mounted\");\n      mqttClient.then(client => {\n        client.on('connect', () => {\n          mqtt = client;\n          test(client);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n\n    /**\n     * Execute when unmounted and mqtt variable is assigned and the mqtt.value is undefined (ref\n     */\n    onUnmounted(() => {\n      console.log(mqtt);\n      if (mqtt) {\n        console.log(\"unmounted\");\n        mqtt = null;\n      }\n    });\n    const test = client => {\n      client.subscribe('test');\n      client.publish('test', 'lol');\n    };\n  }\n};","map":{"version":3,"mappings":"AAMA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AAEvD,eAAe;EACbC,IAAI,EAAE,MAAM;EAEZC,KAAK,EAAE,YAAY;IACjB,IAAIC,IAAG,GAAI,IAAG;IACd,MAAMC,UAAS,GAAIP,MAAM,CAAC,YAAY;IAEtCC,SAAS,CAAC,MAAM;MACdO,OAAO,CAACC,GAAG,CAAC,SAAS;MACrBF,UAAS,CACJG,IAAI,CAAEC,MAAM,IAAK;QAChBA,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;UACzBN,IAAG,GAAIK,MAAK;UACZE,IAAI,CAACF,MAAM;QACb,CAAC;MAEH,CAAC,EACAG,KAAK,CAAEC,GAAG,IAAK;QACdP,OAAO,CAACC,GAAG,CAACM,GAAG;MACjB,CAAC,CAAC;IACR,CAAC;;IAED;;;IAGAb,WAAW,CAAC,MAAK;MACfM,OAAO,CAACC,GAAG,CAACH,IAAI;MAChB,IAAGA,IAAI,EAAC;QACNE,OAAO,CAACC,GAAG,CAAC,WAAW;QACvBH,IAAG,GAAI,IAAG;MACZ;IACF,CAAC;IAED,MAAMO,IAAG,GAAKF,MAAM,IAAK;MACvBA,MAAM,CAACK,SAAS,CAAC,MAAM;MACvBL,MAAM,CAACM,OAAO,CAAC,MAAM,EAAE,KAAK;IAC9B;EAEF;AACF","names":["inject","onMounted","onUnmounted","ref","name","setup","mqtt","mqttClient","console","log","then","client","on","test","catch","err","subscribe","publish"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n</template>\n\n<script>\n\nimport {inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n    let mqtt = null\n    const mqttClient = inject('mqttClient')\n\n    onMounted(() => {\n      console.log(\"mounted\")\n      mqttClient\n          .then((client) => {\n            client.on('connect', () => {\n              mqtt = client\n              test(client)\n            })\n\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    })\n\n    /**\n     * Execute when unmounted and mqtt variable is assigned and the mqtt.value is undefined (ref\n     */\n    onUnmounted(()=> {\n      console.log(mqtt)\n      if(mqtt){\n        console.log(\"unmounted\")\n        mqtt = null\n      }\n    })\n\n    const test = (client) => {\n      client.subscribe('test')\n      client.publish('test', 'lol')\n    }\n\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}