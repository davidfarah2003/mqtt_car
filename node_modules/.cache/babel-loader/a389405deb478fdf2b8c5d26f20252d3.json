{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\nexport default {\n  name: \"Overview\",\n  props: ['canUpdate', 'connected'],\n  emits: ['subscribeToFields', 'updateData'],\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    let dataObject = ref({});\n    let initialized = ref(false);\n    let requiredFields = {\n      \"State Machine\": \"fcu/state_machine/*\",\n      \"State of charge\": \"battery/bat_for_pilot/soc\"\n    };\n    let connected = ref(props.connected);\n    watch(() => props.connected, () => {\n      connected.value = props.connected;\n    });\n    emit(\"subscribeToFields\", requiredFields);\n    setInterval(() => {\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject);\n        if (!initialized.value) initialized.value = true;\n      }\n    }, 1000);\n\n    /**\n     * Returns flight state\n     * @returns {string}\n     **/\n    const flightState = computed(() => {\n      if (initialized.value) {\n        switch (dataObject.value[\"State Machine\"][\"flight_state\"][0]) {\n          case 0:\n            return \"Test\";\n          case 1:\n            return \"Stopped\";\n          case 2:\n            return \"Archimedian\";\n          case 3:\n            return \"Taking off\";\n          case 4:\n            return \"Landing\";\n          case 5:\n            return \"Flying\";\n          case 6:\n            return \"Crashing\";\n          case 7:\n            return \"Crashed\";\n          default:\n            return \"Unknown\";\n        }\n      }\n    });\n\n    /**\n     * Returns flight/control mode\n     * @returns {string}\n     */\n    const flightMode = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"flight_mode\"][0]) {\n        case 0:\n          return \"Test\";\n        case 1:\n          return \"Harbor\";\n        case 2:\n          return \"Going\";\n        case 3:\n          return \"Foil 1\";\n        case 4:\n          return \"Foil 2\";\n        case 5:\n          return \"Foil 3\";\n        case 6:\n          return \"To harbor\";\n        case 7:\n          return \"From harbor\";\n        default:\n          return \"Unknown\";\n      }\n    });\n    const armingState = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"arming_state\"][0]) {\n        case 0:\n          return \"Armed\";\n        case 1:\n          return \"Armnig\";\n        case 2:\n          return \"Arming Denied\";\n        case 3:\n          return \"Disarmed\";\n        default:\n          return \"Unknown\";\n      }\n    });\n    const globalState = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"global_state\"][0]) {\n        case 0:\n          return \"Booting\";\n        case 1:\n          return \"Calibration\";\n        case 2:\n          return \"Ready\";\n        case 3:\n          return \"Powering off\";\n        default:\n          return \"Unknown\";\n      }\n    });\n    return {\n      dataObject,\n      initialized,\n      connected,\n      flightState,\n      flightMode,\n      armingState,\n      globalState\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","watch","name","props","emits","setup","emit","dataObject","initialized","requiredFields","connected","value","setInterval","canUpdate","flightState","flightMode","armingState","globalState"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/General/Overview.vue"],"sourcesContent":["<template>\n  <span class=\"plugin\">\n    <div class=\"container\" v-if=\"initialized\">\n      <span class=\"status\">\n        <label>Flight State:</label>\n        <div class=\"value\">{{flightState}}</div>\n      </span>\n      <span class=\"status\">\n        <label>Arming State:</label>\n        <div class=\"value\">{{armingState}}</div>\n      </span>\n      <span class=\"status\">\n        <label>Control Mode:</label>\n        <div class=\"value\">{{flightMode}}</div>\n      </span>\n      <span class=\"status\">\n        <label>Global State:</label>\n        <div class=\"value\">{{globalState}}</div>\n      </span>\n      <span class=\"status\">\n        <label>State of Charge:</label>\n        <div class=\"value\">{{dataObject[\"State of charge\"][0]}}{{dataObject[\"State of charge\"][1]}}</div>\n      </span>\n    </div>\n  </span>\n\n</template>\n\n<script>\nimport {computed, ref, watch} from \"vue\";\n\nexport default {\n  name: \"Overview\",\n  props: ['canUpdate', 'connected'],\n  emits: ['subscribeToFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n      \"State Machine\": \"fcu/state_machine/*\",\n      \"State of charge\": \"battery/bat_for_pilot/soc\"\n    }\n\n    let connected = ref(props.connected)\n    watch(()=>props.connected, ()=>{\n      connected.value = props.connected\n    })\n\n    emit(\"subscribeToFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 1000)\n\n\n    /**\n     * Returns flight state\n     * @returns {string}\n     **/\n    const flightState = computed(() => {\n      if(initialized.value){\n        switch (dataObject.value[\"State Machine\"][\"flight_state\"][0]) {\n          case 0:return \"Test\";\n          case 1:return \"Stopped\";\n          case 2:return \"Archimedian\";\n          case 3:return \"Taking off\";\n          case 4:return \"Landing\";\n          case 5:return \"Flying\";\n          case 6:return \"Crashing\";\n          case 7:return \"Crashed\";\n          default:return \"Unknown\";\n        }\n      }\n    })\n\n    /**\n     * Returns flight/control mode\n     * @returns {string}\n     */\n    const flightMode = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"flight_mode\"][0]) {\n        case 0: return \"Test\";\n        case 1:return \"Harbor\";\n        case 2:return \"Going\";\n        case 3:return \"Foil 1\";\n        case 4:return \"Foil 2\";\n        case 5:return \"Foil 3\";\n        case 6:return \"To harbor\";\n        case 7:return \"From harbor\";\n        default:return \"Unknown\";\n      }\n    })\n\n    const armingState = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"arming_state\"][0]) {\n        case 0:return \"Armed\";\n        case 1:return \"Armnig\";\n        case 2:return \"Arming Denied\";\n        case 3:return \"Disarmed\";\n        default:return \"Unknown\";\n      }\n    })\n\n    const globalState = computed(() => {\n      switch (dataObject.value[\"State Machine\"][\"global_state\"][0]) {\n        case 0:return \"Booting\";\n        case 1:return \"Calibration\";\n        case 2:return \"Ready\";\n        case 3:return \"Powering off\";\n        default:return \"Unknown\";\n      }\n    })\n\n    return {dataObject, initialized, connected, flightState, flightMode, armingState, globalState}\n  }\n}\n</script>\n\n<style scoped>\n.plugin {\n  color: var(--title_color);\n}\n.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\nlabel {\n  font-size: 0.9rem;\n}\n.value {\n  font-size: 1.3rem;\n  padding-left: 1rem;\n}\n</style>"]},"metadata":{},"sourceType":"module"}