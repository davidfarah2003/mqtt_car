{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ConnectedView from \"@/views/ConnectedView\";\nimport nav_overview from \"@/components/FCU/Nav_overview\";\nimport Status_panel from \"@/components/Home/Status_panel\";\nimport { computed, onActivated, onDeactivated, ref, watch } from \"vue\";\nexport default {\n  name: \"Home\",\n  components: {\n    Status_panel: Status_panel,\n    ConnectedView,\n    nav_overview\n  },\n  setup: function () {\n    let subscribedTopics = ref([]); //Array containing the subscribed topics for this component\n    let dataObject = ref(null);\n    let isActive = ref(false);\n    const updateDataObject = data => {\n      if (isActive.value) dataObject.value = data.value;\n      console.log(dataObject.value);\n    };\n    watch(dataObject, () => {\n      console.log(dataObject.value);\n    });\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings\n     */\n    const subscribeRequiredTopics = requiredValues => {\n      let fieldPathArray = [];\n      Object.entries(requiredValues).forEach(_ref => {\n        let [, fieldPath] = _ref;\n        fieldPathArray = fieldPath.split(\"/\");\n        subscribedTopics.value.push(`${fieldPathArray[0]}/${fieldPathArray[1]}`);\n      });\n    };\n\n    /**\n     * Update the data of a module based on their required values\n     * @param requiredValues array of required values containing path Strings\n     * @param childData The data object of the module. follows the same convention\n     */\n    const updateChildData = (requiredValues, childData) => {\n      let fieldPathArray = [];\n      Object.entries(requiredValues).forEach(_ref2 => {\n        let [fieldName, fieldPath] = _ref2;\n        fieldPathArray = fieldPath.split(\"/\");\n        childData.value[fieldName] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]];\n      });\n    };\n    const canUpdateChildData = computed(() => {\n      console.log(dataObject.value);\n      return dataObject.value && isActive.value;\n    });\n    onActivated(() => {\n      isActive.value = true;\n    });\n    onDeactivated(() => {\n      isActive.value = false;\n    });\n    return {\n      subscribedTopics,\n      dataCallback: updateDataObject,\n      dataObject,\n      updateValues: updateChildData,\n      canUpdateChildData,\n      subscribeRequiredTopics\n    };\n  }\n};","map":{"version":3,"mappings":";AAkBA,OAAOA,aAAY,MAAO,uBAAuB;AACjD,OAAOC,YAAW,MAAO,+BAA+B;AACxD,OAAOC,YAAW,MAAO,gCAAgC;AACzD,SAAQC,QAAQ,EAAEC,WAAW,EAAEC,aAAa,EAAEC,GAAG,EAAEC,KAAK,QAAO,KAAK;AAEpE,eAAe;EACbC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE;IAACP,YAAY,EAAEA,YAAY;IAAEF,aAAa;IAAEC;EAAY,CAAC;EAErES,KAAK,EAAE,YAAY;IACjB,IAAIC,gBAAe,GAAIL,GAAG,CAAC,EAAE,CAAC,EAAE;IAChC,IAAIM,UAAS,GAAIN,GAAG,CAAC,IAAI;IACzB,IAAIO,QAAO,GAAIP,GAAG,CAAC,KAAK,CAAC;IAEzB,MAAMQ,gBAAe,GAAKC,IAAI,IAAK;MACjC,IAAIF,QAAQ,CAACG,KAAK,EAAEJ,UAAU,CAACI,KAAI,GAAID,IAAI,CAACC,KAAI;MAChDC,OAAO,CAACC,GAAG,CAACN,UAAU,CAACI,KAAK;IAC9B;IAEAT,KAAK,CAACK,UAAU,EAAE,MAAI;MACpBK,OAAO,CAACC,GAAG,CAACN,UAAU,CAACI,KAAK;IAC9B,CAAC;;IAGD;;;;IAIA,MAAMG,uBAAsB,GAAKC,cAAc,IAAK;MAClD,IAAIC,cAAa,GAAI,EAAC;MACtBC,MAAM,CAACC,OAAO,CAACH,cAAc,CAAC,CAACI,OAAO,CAAC,QAAiB;QAAA,IAAhB,GAAGC,SAAS,CAAC;QACnDJ,cAAa,GAAII,SAAS,CAACC,KAAK,CAAC,GAAG;QACpCf,gBAAgB,CAACK,KAAK,CAACW,IAAI,CAAE,GAAEN,cAAc,CAAC,CAAC,CAAE,IAAGA,cAAc,CAAC,CAAC,CAAE,EAAC;MACzE,CAAC;IACH;;IAEA;;;;;IAKA,MAAMO,eAAc,GAAI,CAACR,cAAc,EAAES,SAAS,KAAK;MACrD,IAAIR,cAAa,GAAI,EAAC;MAEtBC,MAAM,CAACC,OAAO,CAACH,cAAc,CAAC,CAACI,OAAO,CAAC,SAA4B;QAAA,IAA3B,CAACM,SAAS,EAAEL,SAAS,CAAC;QAC5DJ,cAAa,GAAII,SAAS,CAACC,KAAK,CAAC,GAAG;QACpCG,SAAS,CAACb,KAAK,CAACc,SAAS,IAAIlB,UAAU,CAACI,KAAK,CAACK,cAAc,CAAC,CAAC,CAAC,CAAC,CAACA,cAAc,CAAC,CAAC,CAAC,CAAC,CAACA,cAAc,CAAC,CAAC,CAAC;MACvG,CAAC;IACH;IAEA,MAAMU,kBAAiB,GAAI5B,QAAQ,CAAC,MAAI;MACtCc,OAAO,CAACC,GAAG,CAACN,UAAU,CAACI,KAAK;MAC5B,OAAQJ,UAAU,CAACI,KAAI,IAAKH,QAAQ,CAACG,KAAK;IAC5C,CAAC;IAEDZ,WAAW,CAAC,MAAK;MAACS,QAAQ,CAACG,KAAI,GAAI,IAAI;IAAA,CAAC;IACxCX,aAAa,CAAC,MAAK;MAACQ,QAAQ,CAACG,KAAI,GAAI,KAAK;IAAA,CAAC;IAI3C,OAAO;MAACL,gBAAgB;MAAEqB,YAAY,EAAElB,gBAAgB;MAAEF,UAAU;MAClEqB,YAAY,EAAEL,eAAe;MAAEG,kBAAkB;MAAEZ;IAAuB;EAC9E;AAGF","names":["ConnectedView","nav_overview","Status_panel","computed","onActivated","onDeactivated","ref","watch","name","components","setup","subscribedTopics","dataObject","isActive","updateDataObject","data","value","console","log","subscribeRequiredTopics","requiredValues","fieldPathArray","Object","entries","forEach","fieldPath","split","push","updateChildData","childData","fieldName","canUpdateChildData","dataCallback","updateValues"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <connected-view @dataObject=\"dataCallback\" v-slot=\"data\" :subscribedTopics=\"subscribedTopics\">\n\n      <h1 v-if=\"data.connected\">Connected</h1>\n      <h1 v-else>Disconnected</h1>\n\n      <status_panel @subscribeFields=\"data.subscribeFromFields\" @updateData=\"data.updateChildData\" :canUpdate=\"data.canUpdateChildData\"></status_panel>\n\n      <h3>Data: {{}}</h3>\n\n      <h4>Subscribed topics: {{data.subscribedTopics}}</h4>\n    </connected-view>\n\n  </section>\n</template>\n\n<script>\nimport ConnectedView from \"@/views/ConnectedView\";\nimport nav_overview from \"@/components/FCU/Nav_overview\";\nimport Status_panel from \"@/components/Home/Status_panel\";\nimport {computed, onActivated, onDeactivated, ref, watch} from \"vue\";\n\nexport default {\n  name: \"Home\",\n  components: {Status_panel: Status_panel, ConnectedView, nav_overview},\n\n  setup: function () {\n    let subscribedTopics = ref([]); //Array containing the subscribed topics for this component\n    let dataObject = ref(null)\n    let isActive = ref(false);\n\n    const updateDataObject = (data) => {\n      if (isActive.value) dataObject.value = data.value\n      console.log(dataObject.value)\n    }\n\n    watch(dataObject, ()=>{\n      console.log(dataObject.value)\n    })\n\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings\n     */\n    const subscribeRequiredTopics = (requiredValues) => {\n      let fieldPathArray = []\n      Object.entries(requiredValues).forEach(([, fieldPath])=>{\n        fieldPathArray = fieldPath.split(\"/\")\n        subscribedTopics.value.push(`${fieldPathArray[0]}/${fieldPathArray[1]}`)\n      })\n    }\n\n    /**\n     * Update the data of a module based on their required values\n     * @param requiredValues array of required values containing path Strings\n     * @param childData The data object of the module. follows the same convention\n     */\n    const updateChildData = (requiredValues, childData) => {\n      let fieldPathArray = []\n\n      Object.entries(requiredValues).forEach(([fieldName, fieldPath]) => {\n        fieldPathArray = fieldPath.split(\"/\")\n        childData.value[fieldName] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]]\n      })\n    }\n\n    const canUpdateChildData = computed(()=>{\n      console.log(dataObject.value)\n      return (dataObject.value && isActive.value)\n    })\n\n    onActivated(()=> {isActive.value = true})\n    onDeactivated(()=> {isActive.value = false})\n\n\n\n    return {subscribedTopics, dataCallback: updateDataObject, dataObject,\n      updateValues: updateChildData, canUpdateChildData, subscribeRequiredTopics}\n  }\n\n\n}\n\n</script>\n\n<style scoped>\n.app-main{\n  background: var(--primary);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}