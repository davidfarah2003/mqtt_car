{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"nav\", null, [_createVNode(_component_router_link, {\n    to: {\n      name: 'Home'\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Home\")]),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" | \"), _createVNode(_component_router_link, {\n    to: {\n      name: 'AllData'\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"All Data\")]),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" | \"), _createVNode(_component_router_link, {\n    to: {\n      name: 'Recordings'\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Recordings\")]),\n    _: 1 /* STABLE */\n  })]), _createVNode(_component_router_view)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;6DACEA,oBAIM,cAHJC,aAAoDC;IAAtCC,EAAE,EAAE;MAAAC;IAAA;EAAc;sBAAE,MAAI,kBAAJ,MAAI;;uBAAc,KACpD,gBAA2DF;IAA7CC,EAAE,EAAE;MAAAC;IAAA;EAAiB;sBAAE,MAAQ,kBAAR,UAAQ;;uBAAc,KAC3D,gBAAgEF;IAAlDC,EAAE,EAAE;MAAAC;IAAA;EAAoB;sBAAE,MAAU,kBAAV,YAAU;;QAEpDH,aAAcI","names":["_createElementVNode","_createVNode","_component_router_link","to","name","_component_router_view"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/App.vue"],"sourcesContent":["<template>\n  <nav>\n    <router-link :to=\"{name: 'Home'}\">Home</router-link> |\n    <router-link :to=\"{name: 'AllData'}\">All Data</router-link> |\n    <router-link :to=\"{name: 'Recordings'}\">Recordings</router-link>\n  </nav>\n  <router-view/>\n</template>\n\n<script>\nimport getMqttClient from \"@/composables/getMqttClient\";\n//import {ref} from \"vue\";\nimport mqtt from \"precompiled-mqtt\";\nimport {ref} from \"vue\";\n\nexport default {\n  setup(){\n    const mqtt = require('precompiled-mqtt')\n\n    const options = {\n      // Clean session\n      clean: true,\n      connectTimeout: 4000,\n      // Auth\n      //clientId: 'emqx_test',\n      //username: 'emqx_test',\n      //password: 'emqx_test',\n    }\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    const MQTT = require(\"async-mqtt\");\n\n    const client = MQTT.connect(\"tcp://somehost.com:1883\");\n\n// When passing async functions as event listeners, make sure to have a try catch block\n\n    const doStuff = async () => {\n\n      console.log(\"Starting\");\n      try {\n        await client.publish(\"wow/so/cool\", \"It works!\");\n        // This line doesn't run until the server responds to the publish\n        await client.end();\n        // This line doesn't run until the client has disconnected without error\n        console.log(\"Done\");\n      } catch (e){\n        // Do something about it!\n        console.log(e.stack);\n        process.exit();\n      }\n    }\n\n    client.on(\"connect\", doStuff);\n\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}