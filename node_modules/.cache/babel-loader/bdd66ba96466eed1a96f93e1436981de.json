{"ast":null,"code":"/**\n * Method that extracts data from receivedData using the structure convention, then updates the values in sensorData\n * @param receivedData raw json received from mqtt broker\n * @param sensorData javascript json-like object reference to update\n */\nfunction updateDataFromJSON(receivedData, sensorData) {\n  const parsed = JSON.parse(receivedData);\n  let component_name = \"\";\n  let message_name = \"\";\n  let field_name = \"\";\n  let value = null;\n  try {\n    parsed.forEach(message => {\n      component_name = message[\"component_name\"];\n      message_name = message[\"message_name\"];\n      message[\"sensors\"].forEach(sensor => {\n        field_name = sensor[\"field_name\"];\n        if (sensor[\"field_name\"] === undefined) {\n          throw new Error(\"Received JSON is not well formatted\");\n        }\n        sensorData.value[component_name][message_name][field_name] = sensor[\"value\"];\n      });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport default updateDataFromJSON;","map":{"version":3,"names":["updateDataFromJSON","receivedData","sensorData","parsed","JSON","parse","component_name","message_name","field_name","value","forEach","message","sensor","undefined","Error","err","console","log"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/responseUtils.js"],"sourcesContent":["/**\n * Method that extracts data from receivedData using the structure convention, then updates the values in sensorData\n * @param receivedData raw json received from mqtt broker\n * @param sensorData javascript json-like object reference to update\n */\nfunction updateDataFromJSON(receivedData, sensorData) {\n    const parsed = JSON.parse(receivedData)\n    let component_name = \"\"\n    let message_name = \"\"\n    let field_name = \"\"\n    let value = null\n\n    try {\n        parsed.forEach((message)=>{\n            component_name = message[\"component_name\"]\n            message_name = message[\"message_name\"]\n\n            message[\"sensors\"].forEach((sensor) => {\n                field_name = sensor[\"field_name\"]\n\n                if(sensor[\"field_name\"] === undefined) {throw new Error(\"Received JSON is not well formatted\")}\n                sensorData.value[component_name][message_name][field_name] = sensor[\"value\"]\n            })\n        })\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nexport default updateDataFromJSON"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkB,CAACC,YAAY,EAAEC,UAAU,EAAE;EAClD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;EACvC,IAAIK,cAAc,GAAG,EAAE;EACvB,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,KAAK,GAAG,IAAI;EAEhB,IAAI;IACAN,MAAM,CAACO,OAAO,CAAEC,OAAO,IAAG;MACtBL,cAAc,GAAGK,OAAO,CAAC,gBAAgB,CAAC;MAC1CJ,YAAY,GAAGI,OAAO,CAAC,cAAc,CAAC;MAEtCA,OAAO,CAAC,SAAS,CAAC,CAACD,OAAO,CAAEE,MAAM,IAAK;QACnCJ,UAAU,GAAGI,MAAM,CAAC,YAAY,CAAC;QAEjC,IAAGA,MAAM,CAAC,YAAY,CAAC,KAAKC,SAAS,EAAE;UAAC,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QAAA;QAC9FZ,UAAU,CAACO,KAAK,CAACH,cAAc,CAAC,CAACC,YAAY,CAAC,CAACC,UAAU,CAAC,GAAGI,MAAM,CAAC,OAAO,CAAC;MAChF,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CACD,OAAOG,GAAG,EAAE;IACRC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB;AACJ;AAEA,eAAef,kBAAkB"},"metadata":{},"sourceType":"module"}