{"ast":null,"code":"import { ref } from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n  //maybe need to use ref? i dont think\n\n  const mqtt = require('precompiled-mqtt');\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000\n    // Auth\n    //clientId: 'emqx_test',\n    //username: 'emqx_test',\n    //password: 'emqx_test',\n  };\n\n  const client = ref(null);\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n  const load = () => {\n    const client = ref(mqtt.connect('mqtt://127.0.0.1:9001'));\n    client.value.on('connect', function () {\n      console.log('Connected');\n      client.value.subscribe('test', function (err) {\n        if (!err) {\n          client.value.publish('test', 'Hello mqtt');\n        }\n      });\n    });\n    client.value.on('message', function (topic, message) {\n      // message is Buffer\n      console.log(message.toString());\n    });\n  };\n  return {\n    load,\n    client\n  };\n};\nexport default getMqttClient;","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","options","clean","connectTimeout","client","load","connect","value","on","console","log","subscribe","err","publish","topic","message","toString"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n    //maybe need to use ref? i dont think\n\n    const mqtt = require('precompiled-mqtt')\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        //clientId: 'emqx_test',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n    }\n\n    const client = ref(null)\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n\n    const load = () => {\n        const client  = ref(mqtt.connect('mqtt://127.0.0.1:9001'))\n\n        client.value.on('connect', function () {\n            console.log('Connected')\n            client.value.subscribe('test', function (err) {\n                if (!err) {\n                    client.value.publish('test', 'Hello mqtt')\n                }\n            })\n        })\n\n        client.value.on('message', function (topic, message) {\n            // message is Buffer\n            console.log(message.toString())\n        })\n    }\n    return {load, client}\n}\n\nexport default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;;AAEvB;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,MAAM;EACxB;;EAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,kBAAkB,CAAC;EACxC,MAAMC,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE;IAChB;IACA;IACA;IACA;EACJ,CAAC;;EAED,MAAMC,MAAM,GAAGP,GAAG,CAAC,IAAI,CAAC;EACxB;;EAEA,MAAMQ,IAAI,GAAG,MAAM;IACf,MAAMD,MAAM,GAAIP,GAAG,CAACE,IAAI,CAACO,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAE1DF,MAAM,CAACG,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,YAAY;MACnCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBN,MAAM,CAACG,KAAK,CAACI,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;QAC1C,IAAI,CAACA,GAAG,EAAE;UACNR,MAAM,CAACG,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFT,MAAM,CAACG,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;MACjD;MACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;IACnC,CAAC,CAAC;EACN,CAAC;EACD,OAAO;IAACX,IAAI;IAAED;EAAM,CAAC;AACzB,CAAC;AAED,eAAeN,aAAa"},"metadata":{},"sourceType":"module"}