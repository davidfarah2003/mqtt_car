{"ast":null,"code":"import { ref } from \"vue\";\nexport default {\n  name: \"Battery_summary\",\n  props: ['canUpdate'],\n  emits: ['subscribeToFields', 'updateData'],\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    let dataObject = ref({});\n    let initialized = ref(false);\n    let requiredFields = {\n      \"Pack temp 1\": \"battery/pack_temp_1/*\"\n    };\n    emit(\"subscribeToFields\", requiredFields);\n    setInterval(() => {\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject);\n        if (!initialized.value) initialized.value = true;\n      }\n    }, 1000);\n    return {\n      dataObject,\n      initialized\n    };\n  }\n};","map":{"version":3,"mappings":"AASA,SAAQA,GAAG,QAAO,KAAK;AAEvB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE,CAAC,WAAW,CAAC;EACpBC,KAAK,EAAE,CAAC,mBAAmB,EAAE,YAAY,CAAC;EAE1CC,KAAK,CAACF,KAAK,QAAU;IAAA,IAAR;MAACG;IAAI,CAAC;IACjB,IAAIC,UAAS,GAAIN,GAAG,CAAC,CAAC,CAAC;IACvB,IAAIO,WAAU,GAAIP,GAAG,CAAC,KAAK;IAE3B,IAAIQ,cAAa,GAAI;MACnB,aAAa,EAAE;IACjB;IAEAH,IAAI,CAAC,mBAAmB,EAAEG,cAAc;IAExCC,WAAW,CAAE,MAAI;MACf,IAAIP,KAAK,CAACQ,SAAS,EAAE;QACnBL,IAAI,CAAC,YAAY,EAAEG,cAAc,EAAEF,UAAU;QAC7C,IAAG,CAACC,WAAW,CAACI,KAAK,EAAEJ,WAAW,CAACI,KAAI,GAAI,IAAG;MAChD;IACF,GAAI,IAAI;IAER,OAAO;MAACL,UAAU;MAAEC;IAAW;EACjC;AACF","names":["ref","name","props","emits","setup","emit","dataObject","initialized","requiredFields","setInterval","canUpdate","value"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/components/Battery/Batt_summary.vue"],"sourcesContent":["<template>\n  {{dataObject}}\n  <li v-for=\"(values, fieldName) in dataObject['Pack temp 1']\">\n    <div>{{fieldName}}:</div>\n  </li>\n\n</template>\n\n<script>\nimport {ref} from \"vue\";\n\nexport default {\n  name: \"Battery_summary\",\n  props: ['canUpdate'],\n  emits: ['subscribeToFields', 'updateData'],\n\n  setup(props, {emit}) {\n    let dataObject = ref({})\n    let initialized = ref(false)\n\n    let requiredFields = {\n      \"Pack temp 1\": \"battery/pack_temp_1/*\",\n    }\n\n    emit(\"subscribeToFields\", requiredFields)\n\n    setInterval( ()=>{\n      if (props.canUpdate) {\n        emit(\"updateData\", requiredFields, dataObject)\n        if(!initialized.value) initialized.value = true\n      }\n    } , 1000)\n\n    return {dataObject, initialized}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}