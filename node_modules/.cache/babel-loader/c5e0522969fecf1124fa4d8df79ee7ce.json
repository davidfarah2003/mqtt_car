{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, KeepAlive as _KeepAlive, withCtx as _withCtx, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Navbar), _createVNode(_component_router_view, null, {\n    default: _withCtx(_ref => {\n      let {\n        Component\n      } = _ref;\n      return [(_openBlock(), _createBlock(_KeepAlive, null, [(_openBlock(), _createBlock(_resolveDynamicComponent(Component)))], 1024 /* DYNAMIC_SLOTS */))];\n    }),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;6DACEA,aAASC,oBAETD,aAIcE;sBAHZ;MAAA,IAEa;QAHQC;MAAS;MAAA,uBAC9BC,aAEaC,kCADXD,aAA6BE,yBAAbH,SAAS","names":["_createVNode","_component_Navbar","_component_router_view","Component","_createBlock","_KeepAlive","_resolveDynamicComponent"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/App.vue"],"sourcesContent":["<template>\n  <Navbar/>\n\n  <router-view v-slot=\"{ Component }\">\n    <keep-alive>\n      <component :is=\"Component\" />\n    </keep-alive>\n  </router-view>\n\n</template>\n\n<script>\nimport {provide} from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport Home from \"@/views/Home\";\nimport apiUtils from \"@/composables/apiUtils.mjs\";\nimport Nav_overview from \"@/components/Home/Nav_overview.vue\";\nimport Navbar from \"@/views/Navbar.vue\";\n\nexport default {\n  components: {Navbar, Nav_overview, Home},\n  setup() {\n    //They are created here to be unique between views\n    let API = new apiUtils()\n    provide('apiClient', API)\n\n    let mqttClient = mqttUtils.getMqttClient()\n    provide('mqttClient', mqttClient) //provide the client to components that need it (import via inject(key)\n  },\n}\n</script>\n\n<style>\n\n:root {\n  all: unset;\n  font-family: 'Fira sans', sans-serif;\n  height: 100%;\n\n  --contours: #41434a;\n  --primary: #686868;\n  --primary-dark: #222326;\n  --secondary: #c22e2e;\n  --title_color: white;\n  --text_color: white;\n  --h4_color: #ffbf4e;\n}\n\n#app {\n  background: var(--primary);\n  font-size: 15px;\n  color: var(--text_color);\n}\n\n\nrouter-view{\n  min-height: 600px;\n  height: auto !important;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}