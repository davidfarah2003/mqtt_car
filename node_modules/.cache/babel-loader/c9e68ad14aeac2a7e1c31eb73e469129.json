{"ast":null,"code":"import { inject, onActivated, onDeactivated, onUnmounted, ref } from \"vue\";\nimport { setupClient, cleanClient } from \"@/composables/mqttMethods\";\nexport default {\n  props: ['subscribedTopics', 'dataCallBack'],\n  setup: function (props) {\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    const clientPromise = inject('mqttClient'); //injected mqttClient Promise Object (provided in App.vue)\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false; //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(() => {\n      cleanClient(clientPromise, props.subscribedTopics);\n    });\n    onActivated(() => {\n      if (!hasBeenSetup) {\n        mounted = true;\n        setupClient(clientPromise, props.subscribedTopics, mqttSetup);\n      } else {\n        mounted = true;\n        setupClient(clientPromise, props.subscribedTopics, () => {});\n      }\n    });\n    onDeactivated(() => {\n      mounted = false;\n      cleanClient(clientPromise, props.subscribedTopics);\n    });\n    const mqttSetup = mqttClient => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient);\n      hasBeenSetup = true;\n    };\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient) {\n      //Update connected status correctly\n      if (mqttClient.connected) connected.value = true;\n      mqttClient.on('connect', () => connected.value = true);\n      mqttClient.on('disconnect', () => connected.value = false);\n      mqttClient.on('reconnect', () => connected.value = false);\n      mqttClient.on('message', (topic, message) => {\n        if (mounted) {\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString());\n          test.value = message;\n          try {\n            if (subscribedTopics.includes(topic)) {\n              props.dataCallBack(message);\n            }\n          } catch (e) {\n            console.log(\"There is not input data callback\");\n          }\n        }\n      });\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    let subscribedTopics = props.subscribedTopics;\n    return {\n      test,\n      connected,\n      subscribedTopics\n    };\n  }\n};","map":{"version":3,"mappings":"AAWA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,GAAG,QAAO,KAAK;AACxE,SAAQC,WAAW,EAAEC,WAAW,QAAO,2BAA2B;AAElE,eAAe;EACbC,KAAK,EAAE,CAAC,kBAAkB,EAAE,cAAc,CAAC;EAC3CC,KAAK,EAAE,UAAUD,KAAK,EAAE;IAEtB;;IAEA,MAAME,aAAY,GAAIT,MAAM,CAAC,YAAY,GAAG;IAC5C,IAAIU,SAAQ,GAAIN,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,IAAIO,OAAM,GAAI,KAAK,EAAG;IACtB,IAAIC,YAAW,GAAI,KAAK;IAExB,IAAIC,IAAG,GAAIT,GAAG,CAACU,GAAG,CAAC;;IAEnB;;;IAGAX,WAAW,CAAC,MAAK;MACfG,WAAW,CAACG,aAAa,EAAEF,KAAK,CAACQ,gBAAgB;IACnD,CAAC,CAAC;IAEFd,WAAW,CAAC,MAAK;MACf,IAAI,CAACW,YAAY,EAAE;QACjBD,OAAM,GAAI,IAAG;QACbN,WAAW,CAACI,aAAa,EAAEF,KAAK,CAACQ,gBAAgB,EAAEC,SAAS;MAC9D,OAAO;QACLL,OAAM,GAAI,IAAG;QACbN,WAAW,CAACI,aAAa,EAAEF,KAAK,CAACQ,gBAAgB,EAAE,MAAM,CAAC,CAAC;MAC7D;IACF,CAAC;IAEDb,aAAa,CAAC,MAAK;MACjBS,OAAM,GAAI,KAAI;MACdL,WAAW,CAACG,aAAa,EAAEF,KAAK,CAACQ,gBAAgB;IACnD,CAAC;IAED,MAAMC,SAAQ,GAAKC,UAAU,IAAK;MAChC;MACAC,eAAe,CAACD,UAAU;MAC1BL,YAAW,GAAI,IAAG;IACpB;;IAEA;;;IAGA,SAASM,eAAe,CAACD,UAAU,EAAC;MAClC;MACA,IAAGA,UAAU,CAACP,SAAS,EAAEA,SAAS,CAACS,KAAI,GAAI,IAAG;MAC9CF,UAAU,CAACG,EAAE,CAAC,SAAS,EAAE,MAAMV,SAAS,CAACS,KAAI,GAAI,IAAI;MACrDF,UAAU,CAACG,EAAE,CAAC,YAAY,EAAE,MAAMV,SAAS,CAACS,KAAI,GAAI,KAAK;MACzDF,UAAU,CAACG,EAAE,CAAC,WAAW,EAAE,MAAMV,SAAS,CAACS,KAAI,GAAI,KAAK;MAExDF,UAAU,CAACG,EAAE,CAAC,SAAS,EAAE,CAACC,KAAK,EAAEC,OAAO,KAAG;QACzC,IAAGX,OAAO,EAAC;UACTY,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIH,KAAK,EAAE,GAAG,EAAE,WAAU,GAAIC,OAAO,CAACG,QAAQ,EAAE;UACpEZ,IAAI,CAACM,KAAI,GAAIG,OAAM;UAEnB,IAAI;YACF,IAAGP,gBAAgB,CAACW,QAAQ,CAACL,KAAK,CAAC,EAAE;cACnCd,KAAK,CAACoB,YAAY,CAACL,OAAO;YAC5B;UACF,CAAC,QAAOM,CAAC,EAAC;YACRL,OAAO,CAACC,GAAG,CAAC,kCAAkC;UAChD;QAEF;MACF,CAAC;IACH;;IAEA;IACA,IAAIT,gBAAe,GAAIR,KAAK,CAACQ,gBAAgB;IAE7C,OAAO;MAACF,IAAI;MAAEH,SAAS;MAAEK;IAAgB;EAC3C;AACF","names":["inject","onActivated","onDeactivated","onUnmounted","ref","setupClient","cleanClient","props","setup","clientPromise","connected","mounted","hasBeenSetup","test","NaN","subscribedTopics","mqttSetup","mqttClient","updateVariables","value","on","topic","message","console","log","toString","includes","dataCallBack","e"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :test=\"test\"\n          :subscribedTopics = \"subscribedTopics\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onUnmounted, ref} from \"vue\";\nimport {setupClient, cleanClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  props: ['subscribedTopics', 'dataCallBack'],\n  setup: function (props) {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false;  //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, props.subscribedTopics)\n    });\n\n    onActivated(()=> {\n      if (!hasBeenSetup) {\n        mounted = true\n        setupClient(clientPromise, props.subscribedTopics, mqttSetup)\n      } else {\n        mounted = true\n        setupClient(clientPromise, props.subscribedTopics, () => {})\n      }\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      cleanClient(clientPromise, props.subscribedTopics)\n    })\n\n    const mqttSetup = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n      hasBeenSetup = true\n    }\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n      //Update connected status correctly\n      if(mqttClient.connected) connected.value = true\n      mqttClient.on('connect', () => connected.value = true)\n      mqttClient.on('disconnect', () => connected.value = false)\n      mqttClient.on('reconnect', () => connected.value = false)\n\n      mqttClient.on('message', (topic, message)=>{\n        if(mounted){\n          console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n          test.value = message\n\n          try {\n            if(subscribedTopics.includes(topic)) {\n              props.dataCallBack(message)\n            }\n          }catch (e){\n            console.log(\"There is not input data callback\")\n          }\n\n        }\n      })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    let subscribedTopics = props.subscribedTopics;\n\n    return {test, connected, subscribedTopics}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}