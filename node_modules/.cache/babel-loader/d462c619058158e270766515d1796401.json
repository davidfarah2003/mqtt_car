{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\" Home \"), _ctx.connecteded ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_1, \"Connected\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"h3\", null, \"Data: \" + _toDisplayString(_ctx.test), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;;sFAEE,GAAUA,gBAAW,kBAArBC,oBAAqC,kBAAd,WAAS,wCAChCC,oBAAuB,YAAnB,QAAM,oBAAEF,SAAI","names":["_ctx","_createElementBlock","_createElementVNode"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connecteded\">Connected</h1>\n  <h3>Data: {{test}}</h3>\n\n</template>\n\n<script>\n\nimport {computed, inject, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n    const subscribedTopics = ['hello', 'world', 'bitch'];\n    let connected = ref(false);\n    let test = ref(NaN);\n    let mqttClient = null;\n\n    onMounted(() => {\n      inject('mqttClient')\n          .then((client) => {\n            mqttClient = client\n\n            if (mqttClient.isConnected) connected.value = true\n            else mqttClient.on('connect', ()=> connected.value = true)\n            mqttClient.on('disconnect', () => connected.value = false)\n            \n            setupClient()\n          })\n          .catch((err) => {\n            console.log(err)\n          });\n    });\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      console.log(mqttClient)\n      if(mqttClient)\n      cleanClient()\n    });\n\n    function setupClient() {\n      if (mqttClient) {\n\n\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.subscribe(topic)\n          console.log(\"subscribed to \" + topic)\n        })\n        updateVariables()\n      }\n    }\n\n    function cleanClient() {\n      if(mqttClient){\n        subscribedTopics.forEach( (topic)=> {\n          mqttClient.unsubscribe(topic)\n          console.log(\"unsubscribed from \" + topic)\n        })\n      }\n    }\n\n    let connecteded = ref(computed(()=>{\n      if(mqttClient){\n        connected = mqttClient.connected\n        return connected\n      }\n      return false\n\n    }))\n\n    function updateVariables(){\n      mqttClient.on('message', (topic, message)=>{\n        console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n        test.value = message\n      })\n    }\n\n    return {test, connecteded}\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}