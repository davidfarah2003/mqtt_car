{"ast":null,"code":"import { ref } from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n  const mqtt = require('precompiled-mqtt');\n  let client = ref(null);\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000\n    // Auth\n    //clientId: 'emqx_test',\n    //username: 'emqx_test',\n    //password: 'emqx_test',\n  };\n\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n  connect = () => {};\n  client = ref(mqtt.connect('mqtt://127.0.0.1:9001'));\n  client.value.on('connect', function () {\n    console.log('Connected');\n    client.value.subscribe('test', function (err) {\n      if (!err) {\n        client.value.publish('test', 'Hello mqtt');\n      }\n    });\n  });\n  client.value.on('message', function (topic, message) {\n    // message is Buffer\n    console.log(message.toString());\n  });\n  return {\n    connect,\n    client\n  };\n};\nexport default getMqttClient;","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","client","options","clean","connectTimeout","connect","value","on","console","log","subscribe","err","publish","topic","message","toString"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\n\n/**\n * Use the MQTT.js library to communicate with broker through websockets (Not TCP - that's why I used precompiled-mqtt)\n * @returns {{}}\n */\nconst getMqttClient = () => {\n    const mqtt = require('precompiled-mqtt')\n\n    let client = ref(null)\n\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        //clientId: 'emqx_test',\n        //username: 'emqx_test',\n        //password: 'emqx_test',\n    }\n\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n    connect = () => {\n        \n    }\n    client  = ref(mqtt.connect('mqtt://127.0.0.1:9001'))\n\n    client.value.on('connect', function () {\n        console.log('Connected')\n        client.value.subscribe('test', function (err) {\n            if (!err) {\n                client.value.publish('test', 'Hello mqtt')\n            }\n        })\n    })\n\n    client.value.on('message', function (topic, message) {\n        // message is Buffer\n        console.log(message.toString())\n    })\n\n    return {connect, client}\n}\n\nexport default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;;AAEvB;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,MAAM;EACxB,MAAMC,IAAI,GAAGC,OAAO,CAAC,kBAAkB,CAAC;EAExC,IAAIC,MAAM,GAAGJ,GAAG,CAAC,IAAI,CAAC;EAEtB,MAAMK,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE;IAChB;IACA;IACA;IACA;EACJ,CAAC;;EAGD;EACAC,OAAO,GAAG,MAAM,CAEhB,CAAC;EACDJ,MAAM,GAAIJ,GAAG,CAACE,IAAI,CAACM,OAAO,CAAC,uBAAuB,CAAC,CAAC;EAEpDJ,MAAM,CAACK,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,YAAY;IACnCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxBR,MAAM,CAACK,KAAK,CAACI,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;MAC1C,IAAI,CAACA,GAAG,EAAE;QACNV,MAAM,CAACK,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEFX,MAAM,CAACK,KAAK,CAACC,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;IACjD;IACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;EACnC,CAAC,CAAC;EAEF,OAAO;IAACV,OAAO;IAAEJ;EAAM,CAAC;AAC5B,CAAC;AAED,eAAeH,aAAa"},"metadata":{},"sourceType":"module"}