{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\" Home \");\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _ctx.connected ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, \"Connected\")) : (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, \"Disconnected\")), _createElementVNode(\"h3\", null, \"Data: \" + _toDisplayString(_ctx.test), 1 /* TEXT */), _createElementVNode(\"h4\", null, \"Subscribed topics: \" + _toDisplayString(), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";yDAEE;;;;;;;;yEAAUA,cAAS,kBAAnBC,oBAAmC,kBAAd,WAAS,oBAC9BA,oBAA4B,kBAAjB,cAAY,IAEvBC,oBAAuB,YAAnB,QAAM,oBAAEF,SAAI,kBAChBE,oBAAgC,YAA5B,qBAAmB,qBAAE","names":["_ctx","_createElementBlock","_createElementVNode"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  Home\n  <h1 v-if=\"connected\">Connected</h1>\n  <h1 v-else>Disconnected</h1>\n  \n  <h3>Data: {{test}}</h3>\n  <h4>Subscribed topics: {{}}</h4>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref} from \"vue\";\nimport {setupClient, cleanClient} from \"@/composables/mqttMethods\";\n\nexport default {\n  name: \"Home\",\n\n  setup: function () {\n\n    /*---------------------------------------- General methods and variables -----------------------------------------*/\n    const clientPromise = inject('mqttClient')  //injected mqttClient Promise Object (provided in App.vue)\n    const subscribedTopics = ['hello', 'world', 'bitch']; //Array containing the subscribed topics for this component\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let mounted = false;  //indicate if the Home component is mounted\n    let hasBeenSetup = false;\n\n    let test = ref(NaN);\n\n    /**\n     * Execute when the component is unmounted\n     */\n    onUnmounted(()=> {\n      cleanClient(clientPromise, subscribedTopics)\n    });\n\n    onActivated(()=> {\n      if (!hasBeenSetup) {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, mqttSetup)\n      } else {\n        mounted = true\n        setupClient(clientPromise, subscribedTopics, () => {})\n      }\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      cleanClient(clientPromise, subscribedTopics)\n    })\n\n    const mqttSetup = (mqttClient) => {\n      //Listen for changes and update variables\n      updateVariables(mqttClient)\n      hasBeenSetup = true\n    }\n\n    /**\n     * Listen to incoming messages and update variables accordingly\n     */\n    function updateVariables(mqttClient){\n        console.log(\"test\")\n\n        //Update connected status correctly\n        if(mqttClient.connected) connected.value = true\n        mqttClient.on('connect', () => connected.value = true)\n        mqttClient.on('disconnect', () => connected.value = false)\n        mqttClient.on('reconnect', () => connected.value = false)\n\n        mqttClient.on('message', (topic, message)=>{\n          if(mounted){\n            console.log(\"topic: \" + topic, \",\", \"message: \" + message.toString())\n            test.value = message\n          }\n        })\n    }\n\n    /*----------------------------------------- Returned Values and Methods ------------------------------------------*/\n    return {test, connected, subscribedTopics}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}