{"ast":null,"code":"import { inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref, watch } from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\nexport default {\n  props: ['subscribedTopics', 'mqttCallback'],\n  emits: ['dataObject'],\n  setup: function (props, _ref) {\n    let {\n      emit\n    } = _ref;\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({}); //Object containing all our actual data, gets updated depending on subscribed topics\n\n    /**\n     * Watch changes to the data and update them for the parent component\n     */\n    watch(dataObject, () => {\n      emit(\"dataObject\", dataObject);\n    });\n    let mounted = false; //indicate if the Home component is mounted\n\n    //Use the configuration fetched from the api to build the dataObject\n    inject('apiClient').getConfig(\"CAN_out_config\").then(outConfig => {\n      let configUtil = new configUtils(outConfig);\n      dataObject.value = configUtil.getDataObject();\n    });\n\n    //Use the mqtt client to create an mqttUtil instance, and update our data automatically with a callback\n    const MqttCallback = (topic, message) => {\n      mqttUtils.updateDataFromJSON(message, dataObject);\n    };\n    let mqttUtil = new mqttUtils(inject('mqttClient'), MqttCallback);\n    watch(props.subscribedTopics, () => {\n      console.log(\"subscribed to \" + props.subscribedTopics);\n      mqttUtil.subscribeTo(props.subscribedTopics);\n\n      //this is not working for some reason\n      if (mounted) {\n        console.log(\"subscribed to \" + props.subscribedTopics);\n        mqttUtil.subscribeTo(props.subscribedTopics);\n      }\n    });\n    onActivated(() => {\n      mounted = true;\n      console.log(props.subscribedTopics.value);\n      mqttUtil.subscribeTo(props.subscribedTopics);\n    });\n    onDeactivated(() => {\n      mounted = false;\n      mqttUtil.resetClient();\n    });\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners() {\n      console.log(\"update vars\");\n      //Update connected status correctly\n      if (mqttUtil.connected()) connected.value = true;\n      mqttUtil.on('connect', () => connected.value = true);\n      mqttUtil.on('disconnect', () => connected.value = false);\n      mqttUtil.on('reconnect', () => connected.value = false);\n    }\n    addConnectedListeners();\n    return {\n      dataObject,\n      connected\n    };\n  }\n};","map":{"version":3,"mappings":"AAUA,SAAQA,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,GAAG,EAAEC,KAAK,QAAO,KAAK;AACnG,OAAOC,SAAQ,MAAO,6BAA6B;AACnD,OAAOC,WAAU,MAAO,+BAA+B;AAEvD,eAAe;EACbC,KAAK,EAAE,CAAC,kBAAkB,EAAE,cAAc,CAAC;EAC3CC,KAAK,EAAE,CAAC,YAAY,CAAC;EAErBC,KAAK,EAAE,UAAUF,KAAK,QAAY;IAAA,IAAV;MAAEG;IAAK,CAAC;IAC9B,IAAIC,SAAQ,GAAIR,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,IAAIS,UAAS,GAAIT,GAAG,CAAC,CAAC,CAAC,GAAG;;IAE1B;;;IAGAC,KAAK,CAACQ,UAAU,EAAE,MAAI;MACpBF,IAAI,CAAC,YAAY,EAAEE,UAAU;IAC/B,CAAC;IAED,IAAIC,OAAM,GAAI,KAAK,EAAG;;IAEtB;IACAhB,MAAM,CAAC,WAAW,CAAC,CAACiB,SAAS,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAAEC,SAAS,IAAI;MACjE,IAAIC,UAAS,GAAI,IAAIX,WAAW,CAACU,SAAS;MAC1CJ,UAAU,CAACM,KAAI,GAAID,UAAU,CAACE,aAAa,EAAC;IAC9C,CAAC;;IAED;IACA,MAAMC,YAAW,GAAI,CAACC,KAAK,EAAEC,OAAO,KAAK;MACvCjB,SAAS,CAACkB,kBAAkB,CAACD,OAAO,EAAEV,UAAU;IAClD;IACA,IAAIY,QAAO,GAAI,IAAInB,SAAS,CAACR,MAAM,CAAC,YAAY,CAAC,EAAEuB,YAAY;IAE/DhB,KAAK,CAACG,KAAK,CAACkB,gBAAgB,EAAE,MAAI;MAChCC,OAAO,CAACC,GAAG,CAAC,gBAAe,GAAIpB,KAAK,CAACkB,gBAAgB;MACrDD,QAAQ,CAACI,WAAW,CAACrB,KAAK,CAACkB,gBAAgB;;MAE3C;MACA,IAAIZ,OAAO,EAAE;QACXa,OAAO,CAACC,GAAG,CAAC,gBAAe,GAAIpB,KAAK,CAACkB,gBAAgB;QACrDD,QAAQ,CAACI,WAAW,CAACrB,KAAK,CAACkB,gBAAgB;MAC7C;IACF,CAAC;IAED3B,WAAW,CAAC,MAAK;MACfe,OAAM,GAAI,IAAG;MACba,OAAO,CAACC,GAAG,CAACpB,KAAK,CAACkB,gBAAgB,CAACP,KAAK;MACxCM,QAAQ,CAACI,WAAW,CAACrB,KAAK,CAACkB,gBAAgB;IAC7C,CAAC;IAED1B,aAAa,CAAC,MAAK;MACjBc,OAAM,GAAI,KAAI;MACdW,QAAQ,CAACK,WAAW,EAAC;IACvB,CAAC;;IAED;;;IAGA,SAASC,qBAAqB,GAAE;MAC9BJ,OAAO,CAACC,GAAG,CAAC,aAAa;MACzB;MACA,IAAGH,QAAQ,CAACb,SAAS,EAAE,EAAEA,SAAS,CAACO,KAAI,GAAI,IAAG;MAC9CM,QAAQ,CAACO,EAAE,CAAC,SAAS,EAAE,MAAMpB,SAAS,CAACO,KAAI,GAAI,IAAI;MACnDM,QAAQ,CAACO,EAAE,CAAC,YAAY,EAAE,MAAMpB,SAAS,CAACO,KAAI,GAAI,KAAK;MACvDM,QAAQ,CAACO,EAAE,CAAC,WAAW,EAAE,MAAMpB,SAAS,CAACO,KAAI,GAAI,KAAK;IACxD;IACAY,qBAAqB,EAAC;IAGtB,OAAO;MAAClB,UAAU;MAAED;IAAS;EAC/B;AACF","names":["inject","onActivated","onDeactivated","onMounted","onUnmounted","provide","ref","watch","mqttUtils","configUtils","props","emits","setup","emit","connected","dataObject","mounted","getConfig","then","outConfig","configUtil","value","getDataObject","MqttCallback","topic","message","updateDataFromJSON","mqttUtil","subscribedTopics","console","log","subscribeTo","resetClient","addConnectedListeners","on"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/ConnectedView.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <slot :connected=\"connected\"\n          :dataObject=\"dataObject\"\n    />\n  </section>\n</template>\n\n<script>\n\nimport {inject, onActivated, onDeactivated, onMounted, onUnmounted, provide, ref, watch} from \"vue\";\nimport mqttUtils from \"@/composables/mqttUtils.mjs\";\nimport configUtils from \"@/composables/configUtils.mjs\";\n\nexport default {\n  props: ['subscribedTopics', 'mqttCallback'],\n  emits: ['dataObject'],\n\n  setup: function (props, { emit }) {\n    let connected = ref(false); //Boolean value that indicates if the client is connected to the broker\n    let dataObject = ref({})  //Object containing all our actual data, gets updated depending on subscribed topics\n\n    /**\n     * Watch changes to the data and update them for the parent component\n     */\n    watch(dataObject, ()=>{\n      emit(\"dataObject\", dataObject)\n    })\n\n    let mounted = false;  //indicate if the Home component is mounted\n\n    //Use the configuration fetched from the api to build the dataObject\n    inject('apiClient').getConfig(\"CAN_out_config\").then((outConfig)=> {\n      let configUtil = new configUtils(outConfig)\n      dataObject.value = configUtil.getDataObject()\n    })\n\n    //Use the mqtt client to create an mqttUtil instance, and update our data automatically with a callback\n    const MqttCallback = (topic, message) => {\n      mqttUtils.updateDataFromJSON(message, dataObject)\n    }\n    let mqttUtil = new mqttUtils(inject('mqttClient'), MqttCallback)\n\n    watch(props.subscribedTopics, ()=>{\n      console.log(\"subscribed to \" + props.subscribedTopics)\n      mqttUtil.subscribeTo(props.subscribedTopics)\n\n      //this is not working for some reason\n      if (mounted) {\n        console.log(\"subscribed to \" + props.subscribedTopics)\n        mqttUtil.subscribeTo(props.subscribedTopics)\n      }\n    })\n\n    onActivated(()=> {\n      mounted = true\n      console.log(props.subscribedTopics.value)\n      mqttUtil.subscribeTo(props.subscribedTopics)\n    })\n\n    onDeactivated(()=> {\n      mounted = false\n      mqttUtil.resetClient()\n    })\n\n    /**\n     * Add listeners to update the connected status\n     */\n    function addConnectedListeners(){\n      console.log(\"update vars\")\n      //Update connected status correctly\n      if(mqttUtil.connected()) connected.value = true\n      mqttUtil.on('connect', () => connected.value = true)\n      mqttUtil.on('disconnect', () => connected.value = false)\n      mqttUtil.on('reconnect', () => connected.value = false)\n    }\n    addConnectedListeners()\n\n\n    return {dataObject, connected}\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}