{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-fae5bece\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"app-main\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_status_panel = _resolveComponent(\"status_panel\");\n  const _component_connected_view = _resolveComponent(\"connected-view\");\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createVNode(_component_connected_view, {\n    onDataObject: _ctx.dataCallback,\n    subscribedTopics: _ctx.subscribedTopics\n  }, {\n    default: _withCtx(data => [data.connected ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, \"Connected\")) : (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, \"Disconnected\")), _createVNode(_component_status_panel, {\n      onSubscribeFields: _ctx.subscribeRequiredTopics,\n      onUpdateData: _ctx.updateValues,\n      canUpdate: _ctx.canUpdateChildData\n    }, null, 8 /* PROPS */, [\"onSubscribeFields\", \"onUpdateData\", \"canUpdate\"]), _createElementVNode(\"h3\", null, \"Data: \" + _toDisplayString(), 1 /* TEXT */), _createElementVNode(\"h4\", null, \"Subscribed topics: \" + _toDisplayString(_ctx.subscribedTopics), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onDataObject\", \"subscribedTopics\"])]);\n}","map":{"version":3,"mappings":";;;EACWA,KAAK,EAAC;AAAU;;;;;;;;;;uBAAzBC,oBAaU,WAbVC,UAaU,GAZRC,aAUiBC;IAVAC,YAAU,EAAEC,iBAAY;IAAiBC,gBAAgB,EAAED;;sBAAzBE,IAAI,KAE3CA,IAAI,CAACC,SAAS,kBAAxBR,oBAAwC,kBAAd,WAAS,oBACnCA,oBAA4B,kBAAjB,cAAY,IAEvBE,aAAmIO;MAApHC,iBAAe,EAAEL,4BAAuB;MAAGM,YAAU,EAAEN,iBAAY;MAAGO,SAAS,EAAEP;iFAEhGQ,oBAAmB,YAAf,QAAM,qBAAE,iBAEZA,oBAAgD,YAA5C,qBAAmB,oBAAER,qBAAgB","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_connected_view","onDataObject","_ctx","subscribedTopics","data","connected","_component_status_panel","onSubscribeFields","onUpdateData","canUpdate","_createElementVNode"],"sourceRoot":"","sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/views/Home.vue"],"sourcesContent":["<template>\n  <section class=\"app-main\">\n    <connected-view @dataObject=\"dataCallback\" v-slot=\"data\" :subscribedTopics=\"subscribedTopics\">\n\n      <h1 v-if=\"data.connected\">Connected</h1>\n      <h1 v-else>Disconnected</h1>\n\n      <status_panel @subscribeFields=\"subscribeRequiredTopics\" @updateData=\"updateValues\" :canUpdate=\"canUpdateChildData\"></status_panel>\n\n      <h3>Data: {{}}</h3>\n\n      <h4>Subscribed topics: {{subscribedTopics}}</h4>\n    </connected-view>\n\n  </section>\n</template>\n\n<script>\nimport ConnectedView from \"@/views/ConnectedView\";\nimport nav_overview from \"@/components/FCU/Nav_overview\";\nimport Status_panel from \"@/components/Home/Status_panel\";\nimport {computed, onActivated, onDeactivated, ref, watch} from \"vue\";\n\nexport default {\n  name: \"Home\",\n  components: {Status_panel: Status_panel, ConnectedView, nav_overview},\n\n  setup: function () {\n    let subscribedTopics = ref([]); //Array containing the subscribed topics for this component\n    let dataObject = ref()\n    let isActive = ref(false);\n\n    const updateDataObject = (data) => {\n      if (isActive.value) dataObject.value = data.value\n      console.log(dataObject.value)\n    }\n\n    watch(dataObject, ()=>{\n      console.log(dataObject.value)\n    })\n\n\n    /**\n     * Subscribe to the required topics if not already done\n     * @param requiredValues array of required values containing path Strings\n     */\n    const subscribeRequiredTopics = (requiredValues) => {\n      let fieldPathArray = []\n      Object.entries(requiredValues).forEach(([, fieldPath])=>{\n        fieldPathArray = fieldPath.split(\"/\")\n        subscribedTopics.value.push(`${fieldPathArray[0]}/${fieldPathArray[1]}`)\n      })\n    }\n\n    /**\n     * Update the data of a module based on their required values\n     * @param requiredValues array of required values containing path Strings\n     * @param childData The data object of the module. follows the same convention\n     */\n    const updateChildData = (requiredValues, childData) => {\n      let fieldPathArray = []\n\n      Object.entries(requiredValues).forEach(([fieldName, fieldPath]) => {\n        fieldPathArray = fieldPath.split(\"/\")\n        childData.value[fieldName] = dataObject.value[fieldPathArray[0]][fieldPathArray[1]][fieldPathArray[2]]\n      })\n    }\n\n    const canUpdateChildData = computed(()=>{\n      return (dataObject.value && isActive.value)\n    })\n\n    onActivated(()=> {isActive.value = true})\n    onDeactivated(()=> {isActive.value = false})\n\n\n\n    return {subscribedTopics, dataCallback: updateDataObject, dataObject,\n      updateValues: updateChildData, canUpdateChildData, subscribeRequiredTopics}\n  }\n\n\n}\n\n</script>\n\n<style scoped>\n.app-main{\n  background: var(--primary);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}