{"ast":null,"code":"import { ref } from \"vue\";\nconst getMqttClient = () => {\n  //maybe need to use ref? i dont think\n\n  const mqtt = require('precompiled-mqtt');\n  const options = {\n    // Clean session\n    clean: true,\n    connectTimeout: 4000,\n    // Auth\n    clientId: 'emqx_test',\n    username: 'emqx_test',\n    password: 'emqx_test'\n  };\n  const client = ref(null);\n\n  //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n  const getClient = brokerUrl => {\n    const client = mqtt.connect(brokerUrl);\n    client.on('connect', function () {\n      console.log('Connected');\n      client.subscribe('test', function (err) {\n        if (!err) {\n          client.publish('test', 'Hello mqtt');\n        }\n      });\n    });\n    client.on('message', function (topic, message) {\n      // message is Buffer\n      console.log(message.toString());\n      client.end();\n    });\n  };\n  return {\n    getClient\n  };\n};\ngetMqttClient();\n\n//export default getMqttClient","map":{"version":3,"names":["ref","getMqttClient","mqtt","require","options","clean","connectTimeout","clientId","username","password","client","getClient","brokerUrl","connect","on","console","log","subscribe","err","publish","topic","message","toString","end"],"sources":["/home/davidf/Desktop/SSB/ssb-interface-v2/src/composables/getMqttClient.js"],"sourcesContent":["import {ref} from \"vue\";\n\nconst getMqttClient = () => {\n    //maybe need to use ref? i dont think\n\n    const mqtt = require('precompiled-mqtt')\n    const options = {\n        // Clean session\n        clean: true,\n        connectTimeout: 4000,\n        // Auth\n        clientId: 'emqx_test',\n        username: 'emqx_test',\n        password: 'emqx_test',\n    }\n\n    const client = ref(null);\n\n    //const client  = mqtt.connect('mqtt://broker.emqx.io:1883', options)\n    const getClient = (brokerUrl) => {\n        const client  = mqtt.connect(brokerUrl)\n\n        client.on('connect', function () {\n            console.log('Connected')\n            client.subscribe('test', function (err) {\n                if (!err) {\n                    client.publish('test', 'Hello mqtt')\n                }\n            })\n        })\n\n        client.on('message', function (topic, message) {\n            // message is Buffer\n            console.log(message.toString())\n            client.end()\n        })\n    }\n\n    return {getClient}\n}\n\ngetMqttClient()\n\n//export default getMqttClient"],"mappings":"AAAA,SAAQA,GAAG,QAAO,KAAK;AAEvB,MAAMC,aAAa,GAAG,MAAM;EACxB;;EAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,kBAAkB,CAAC;EACxC,MAAMC,OAAO,GAAG;IACZ;IACAC,KAAK,EAAE,IAAI;IACXC,cAAc,EAAE,IAAI;IACpB;IACAC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE;EACd,CAAC;EAED,MAAMC,MAAM,GAAGV,GAAG,CAAC,IAAI,CAAC;;EAExB;EACA,MAAMW,SAAS,GAAIC,SAAS,IAAK;IAC7B,MAAMF,MAAM,GAAIR,IAAI,CAACW,OAAO,CAACD,SAAS,CAAC;IAEvCF,MAAM,CAACI,EAAE,CAAC,SAAS,EAAE,YAAY;MAC7BC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBN,MAAM,CAACO,SAAS,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;QACpC,IAAI,CAACA,GAAG,EAAE;UACNR,MAAM,CAACS,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC;QACxC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFT,MAAM,CAACI,EAAE,CAAC,SAAS,EAAE,UAAUM,KAAK,EAAEC,OAAO,EAAE;MAC3C;MACAN,OAAO,CAACC,GAAG,CAACK,OAAO,CAACC,QAAQ,EAAE,CAAC;MAC/BZ,MAAM,CAACa,GAAG,EAAE;IAChB,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAACZ;EAAS,CAAC;AACtB,CAAC;AAEDV,aAAa,EAAE;;AAEf"},"metadata":{},"sourceType":"module"}